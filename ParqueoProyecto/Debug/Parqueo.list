
Parqueo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b0  08003ec4  08003ec4  00004ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f74  08004f74  0000f284  2**0
                  CONTENTS
  4 .ARM          00000008  08004f74  08004f74  00005f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f7c  08004f7c  0000f284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f7c  08004f7c  00005f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f80  08004f80  00005f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00009284  20000000  08004f84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20009284  0800e208  0000f284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200094a0  0800e208  0000f4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099fb  00000000  00000000  0000f2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab0  00000000  00000000  00018caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0001a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002227a  00000000  00000000  0001b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000dd5c  00000000  00000000  0003d3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000cc079  00000000  00000000  0004b13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001171b7  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000799  00000000  00000000  001171fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d54  00000000  00000000  00117994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0011a6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20009284 	.word	0x20009284
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003eac 	.word	0x08003eac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20009288 	.word	0x20009288
 800020c:	08003eac 	.word	0x08003eac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2101      	movs	r1, #1
 80005b8:	4878      	ldr	r0, [pc, #480]	@ (800079c <LCD_Init+0x1ec>)
 80005ba:	f001 fd47 	bl	800204c <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 80005be:	2201      	movs	r2, #1
 80005c0:	2113      	movs	r1, #19
 80005c2:	4877      	ldr	r0, [pc, #476]	@ (80007a0 <LCD_Init+0x1f0>)
 80005c4:	f001 fd42 	bl	800204c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2102      	movs	r1, #2
 80005cc:	4875      	ldr	r0, [pc, #468]	@ (80007a4 <LCD_Init+0x1f4>)
 80005ce:	f001 fd3d 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80005d2:	2005      	movs	r0, #5
 80005d4:	f001 fa84 	bl	8001ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2102      	movs	r1, #2
 80005dc:	4871      	ldr	r0, [pc, #452]	@ (80007a4 <LCD_Init+0x1f4>)
 80005de:	f001 fd35 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80005e2:	2014      	movs	r0, #20
 80005e4:	f001 fa7c 	bl	8001ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2102      	movs	r1, #2
 80005ec:	486d      	ldr	r0, [pc, #436]	@ (80007a4 <LCD_Init+0x1f4>)
 80005ee:	f001 fd2d 	bl	800204c <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80005f2:	2096      	movs	r0, #150	@ 0x96
 80005f4:	f001 fa74 	bl	8001ae0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	4867      	ldr	r0, [pc, #412]	@ (800079c <LCD_Init+0x1ec>)
 80005fe:	f001 fd25 	bl	800204c <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 8000602:	20e9      	movs	r0, #233	@ 0xe9
 8000604:	f000 f8d0 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x20);
 8000608:	2020      	movs	r0, #32
 800060a:	f000 f973 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 800060e:	2011      	movs	r0, #17
 8000610:	f000 f8ca 	bl	80007a8 <LCD_CMD>
	HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	@ 0x64
 8000616:	f001 fa63 	bl	8001ae0 <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 800061a:	20d1      	movs	r0, #209	@ 0xd1
 800061c:	f000 f8c4 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f967 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x71);
 8000626:	2071      	movs	r0, #113	@ 0x71
 8000628:	f000 f964 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x19);
 800062c:	2019      	movs	r0, #25
 800062e:	f000 f961 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8000632:	20d0      	movs	r0, #208	@ 0xd0
 8000634:	f000 f8b8 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x07);
 8000638:	2007      	movs	r0, #7
 800063a:	f000 f95b 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800063e:	2001      	movs	r0, #1
 8000640:	f000 f958 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 8000644:	2008      	movs	r0, #8
 8000646:	f000 f955 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800064a:	2036      	movs	r0, #54	@ 0x36
 800064c:	f000 f8ac 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8000650:	20e8      	movs	r0, #232	@ 0xe8
 8000652:	f000 f94f 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 8000656:	203a      	movs	r0, #58	@ 0x3a
 8000658:	f000 f8a6 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 800065c:	2005      	movs	r0, #5
 800065e:	f000 f949 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8000662:	20c1      	movs	r0, #193	@ 0xc1
 8000664:	f000 f8a0 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x10);
 8000668:	2010      	movs	r0, #16
 800066a:	f000 f943 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x10);
 800066e:	2010      	movs	r0, #16
 8000670:	f000 f940 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 8000674:	2002      	movs	r0, #2
 8000676:	f000 f93d 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 800067a:	2002      	movs	r0, #2
 800067c:	f000 f93a 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8000680:	20c0      	movs	r0, #192	@ 0xc0
 8000682:	f000 f891 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 8000686:	2000      	movs	r0, #0
 8000688:	f000 f934 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x35);
 800068c:	2035      	movs	r0, #53	@ 0x35
 800068e:	f000 f931 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f92e 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000698:	2000      	movs	r0, #0
 800069a:	f000 f92b 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f928 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x02);
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 f925 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 80006aa:	20c5      	movs	r0, #197	@ 0xc5
 80006ac:	f000 f87c 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 80006b0:	2004      	movs	r0, #4
 80006b2:	f000 f91f 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 80006b6:	20d2      	movs	r0, #210	@ 0xd2
 80006b8:	f000 f876 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x01);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 f919 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x44);
 80006c2:	2044      	movs	r0, #68	@ 0x44
 80006c4:	f000 f916 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 80006c8:	20c8      	movs	r0, #200	@ 0xc8
 80006ca:	f000 f86d 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x04);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f000 f910 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x67);
 80006d4:	2067      	movs	r0, #103	@ 0x67
 80006d6:	f000 f90d 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x35);
 80006da:	2035      	movs	r0, #53	@ 0x35
 80006dc:	f000 f90a 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x04);
 80006e0:	2004      	movs	r0, #4
 80006e2:	f000 f907 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 80006e6:	2008      	movs	r0, #8
 80006e8:	f000 f904 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x06);
 80006ec:	2006      	movs	r0, #6
 80006ee:	f000 f901 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x24);
 80006f2:	2024      	movs	r0, #36	@ 0x24
 80006f4:	f000 f8fe 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f000 f8fb 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x37);
 80006fe:	2037      	movs	r0, #55	@ 0x37
 8000700:	f000 f8f8 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x40);
 8000704:	2040      	movs	r0, #64	@ 0x40
 8000706:	f000 f8f5 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x03);
 800070a:	2003      	movs	r0, #3
 800070c:	f000 f8f2 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x10);
 8000710:	2010      	movs	r0, #16
 8000712:	f000 f8ef 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x08);
 8000716:	2008      	movs	r0, #8
 8000718:	f000 f8ec 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x80);
 800071c:	2080      	movs	r0, #128	@ 0x80
 800071e:	f000 f8e9 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 f8e6 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 8000728:	202a      	movs	r0, #42	@ 0x2a
 800072a:	f000 f83d 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f8e0 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f8dd 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 800073a:	2001      	movs	r0, #1
 800073c:	f000 f8da 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x3F);
 8000740:	203f      	movs	r0, #63	@ 0x3f
 8000742:	f000 f8d7 	bl	80008f4 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 8000746:	202b      	movs	r0, #43	@ 0x2b
 8000748:	f000 f82e 	bl	80007a8 <LCD_CMD>
	LCD_DATA(0x00);
 800074c:	2000      	movs	r0, #0
 800074e:	f000 f8d1 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 f8ce 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0x01);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 f8cb 	bl	80008f4 <LCD_DATA>
	LCD_DATA(0xE0);
 800075e:	20e0      	movs	r0, #224	@ 0xe0
 8000760:	f000 f8c8 	bl	80008f4 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8000764:	2029      	movs	r0, #41	@ 0x29
 8000766:	f000 f81f 	bl	80007a8 <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800076a:	202c      	movs	r0, #44	@ 0x2c
 800076c:	f000 f81c 	bl	80007a8 <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8000770:	2020      	movs	r0, #32
 8000772:	f000 f819 	bl	80007a8 <LCD_CMD>
	HAL_Delay(120);
 8000776:	2078      	movs	r0, #120	@ 0x78
 8000778:	f001 f9b2 	bl	8001ae0 <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 800077c:	2011      	movs	r0, #17
 800077e:	f000 f813 	bl	80007a8 <LCD_CMD>
	HAL_Delay(120);
 8000782:	2078      	movs	r0, #120	@ 0x78
 8000784:	f001 f9ac 	bl	8001ae0 <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 8000788:	2029      	movs	r0, #41	@ 0x29
 800078a:	f000 f80d 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2101      	movs	r1, #1
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <LCD_Init+0x1ec>)
 8000794:	f001 fc5a 	bl	800204c <HAL_GPIO_WritePin>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2110      	movs	r1, #16
 80007b6:	484c      	ldr	r0, [pc, #304]	@ (80008e8 <LCD_CMD+0x140>)
 80007b8:	f001 fc48 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2102      	movs	r1, #2
 80007c0:	4849      	ldr	r0, [pc, #292]	@ (80008e8 <LCD_CMD+0x140>)
 80007c2:	f001 fc43 	bl	800204c <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d006      	beq.n	80007de <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d6:	4844      	ldr	r0, [pc, #272]	@ (80008e8 <LCD_CMD+0x140>)
 80007d8:	f001 fc38 	bl	800204c <HAL_GPIO_WritePin>
 80007dc:	e005      	b.n	80007ea <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e4:	4840      	ldr	r0, [pc, #256]	@ (80008e8 <LCD_CMD+0x140>)
 80007e6:	f001 fc31 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 0302 	and.w	r3, r3, #2
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d005      	beq.n	8000800 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2180      	movs	r1, #128	@ 0x80
 80007f8:	483c      	ldr	r0, [pc, #240]	@ (80008ec <LCD_CMD+0x144>)
 80007fa:	f001 fc27 	bl	800204c <HAL_GPIO_WritePin>
 80007fe:	e004      	b.n	800080a <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2180      	movs	r1, #128	@ 0x80
 8000804:	4839      	ldr	r0, [pc, #228]	@ (80008ec <LCD_CMD+0x144>)
 8000806:	f001 fc21 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 0304 	and.w	r3, r3, #4
 8000810:	2b00      	cmp	r3, #0
 8000812:	d006      	beq.n	8000822 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800081a:	4833      	ldr	r0, [pc, #204]	@ (80008e8 <LCD_CMD+0x140>)
 800081c:	f001 fc16 	bl	800204c <HAL_GPIO_WritePin>
 8000820:	e005      	b.n	800082e <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000828:	482f      	ldr	r0, [pc, #188]	@ (80008e8 <LCD_CMD+0x140>)
 800082a:	f001 fc0f 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 0308 	and.w	r3, r3, #8
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2108      	movs	r1, #8
 800083c:	482c      	ldr	r0, [pc, #176]	@ (80008f0 <LCD_CMD+0x148>)
 800083e:	f001 fc05 	bl	800204c <HAL_GPIO_WritePin>
 8000842:	e004      	b.n	800084e <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	2108      	movs	r1, #8
 8000848:	4829      	ldr	r0, [pc, #164]	@ (80008f0 <LCD_CMD+0x148>)
 800084a:	f001 fbff 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	2b00      	cmp	r3, #0
 8000856:	d005      	beq.n	8000864 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2120      	movs	r1, #32
 800085c:	4824      	ldr	r0, [pc, #144]	@ (80008f0 <LCD_CMD+0x148>)
 800085e:	f001 fbf5 	bl	800204c <HAL_GPIO_WritePin>
 8000862:	e004      	b.n	800086e <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2120      	movs	r1, #32
 8000868:	4821      	ldr	r0, [pc, #132]	@ (80008f0 <LCD_CMD+0x148>)
 800086a:	f001 fbef 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 0320 	and.w	r3, r3, #32
 8000874:	2b00      	cmp	r3, #0
 8000876:	d005      	beq.n	8000884 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	481c      	ldr	r0, [pc, #112]	@ (80008f0 <LCD_CMD+0x148>)
 800087e:	f001 fbe5 	bl	800204c <HAL_GPIO_WritePin>
 8000882:	e004      	b.n	800088e <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2110      	movs	r1, #16
 8000888:	4819      	ldr	r0, [pc, #100]	@ (80008f0 <LCD_CMD+0x148>)
 800088a:	f001 fbdf 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000894:	2b00      	cmp	r3, #0
 8000896:	d006      	beq.n	80008a6 <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <LCD_CMD+0x148>)
 80008a0:	f001 fbd4 	bl	800204c <HAL_GPIO_WritePin>
 80008a4:	e005      	b.n	80008b2 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ac:	4810      	ldr	r0, [pc, #64]	@ (80008f0 <LCD_CMD+0x148>)
 80008ae:	f001 fbcd 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	da06      	bge.n	80008c8 <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <LCD_CMD+0x140>)
 80008c2:	f001 fbc3 	bl	800204c <HAL_GPIO_WritePin>
 80008c6:	e005      	b.n	80008d4 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <LCD_CMD+0x140>)
 80008d0:	f001 fbbc 	bl	800204c <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2102      	movs	r1, #2
 80008d8:	4803      	ldr	r0, [pc, #12]	@ (80008e8 <LCD_CMD+0x140>)
 80008da:	f001 fbb7 	bl	800204c <HAL_GPIO_WritePin>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40020000 	.word	0x40020000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020400 	.word	0x40020400

080008f4 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2110      	movs	r1, #16
 8000902:	484c      	ldr	r0, [pc, #304]	@ (8000a34 <LCD_DATA+0x140>)
 8000904:	f001 fba2 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2102      	movs	r1, #2
 800090c:	4849      	ldr	r0, [pc, #292]	@ (8000a34 <LCD_DATA+0x140>)
 800090e:	f001 fb9d 	bl	800204c <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000922:	4844      	ldr	r0, [pc, #272]	@ (8000a34 <LCD_DATA+0x140>)
 8000924:	f001 fb92 	bl	800204c <HAL_GPIO_WritePin>
 8000928:	e005      	b.n	8000936 <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000930:	4840      	ldr	r0, [pc, #256]	@ (8000a34 <LCD_DATA+0x140>)
 8000932:	f001 fb8b 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 0302 	and.w	r3, r3, #2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d005      	beq.n	800094c <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2180      	movs	r1, #128	@ 0x80
 8000944:	483c      	ldr	r0, [pc, #240]	@ (8000a38 <LCD_DATA+0x144>)
 8000946:	f001 fb81 	bl	800204c <HAL_GPIO_WritePin>
 800094a:	e004      	b.n	8000956 <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2180      	movs	r1, #128	@ 0x80
 8000950:	4839      	ldr	r0, [pc, #228]	@ (8000a38 <LCD_DATA+0x144>)
 8000952:	f001 fb7b 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000966:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <LCD_DATA+0x140>)
 8000968:	f001 fb70 	bl	800204c <HAL_GPIO_WritePin>
 800096c:	e005      	b.n	800097a <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000974:	482f      	ldr	r0, [pc, #188]	@ (8000a34 <LCD_DATA+0x140>)
 8000976:	f001 fb69 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	2b00      	cmp	r3, #0
 8000982:	d005      	beq.n	8000990 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2108      	movs	r1, #8
 8000988:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <LCD_DATA+0x148>)
 800098a:	f001 fb5f 	bl	800204c <HAL_GPIO_WritePin>
 800098e:	e004      	b.n	800099a <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2108      	movs	r1, #8
 8000994:	4829      	ldr	r0, [pc, #164]	@ (8000a3c <LCD_DATA+0x148>)
 8000996:	f001 fb59 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2120      	movs	r1, #32
 80009a8:	4824      	ldr	r0, [pc, #144]	@ (8000a3c <LCD_DATA+0x148>)
 80009aa:	f001 fb4f 	bl	800204c <HAL_GPIO_WritePin>
 80009ae:	e004      	b.n	80009ba <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2120      	movs	r1, #32
 80009b4:	4821      	ldr	r0, [pc, #132]	@ (8000a3c <LCD_DATA+0x148>)
 80009b6:	f001 fb49 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d005      	beq.n	80009d0 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	481c      	ldr	r0, [pc, #112]	@ (8000a3c <LCD_DATA+0x148>)
 80009ca:	f001 fb3f 	bl	800204c <HAL_GPIO_WritePin>
 80009ce:	e004      	b.n	80009da <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2110      	movs	r1, #16
 80009d4:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <LCD_DATA+0x148>)
 80009d6:	f001 fb39 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ea:	4814      	ldr	r0, [pc, #80]	@ (8000a3c <LCD_DATA+0x148>)
 80009ec:	f001 fb2e 	bl	800204c <HAL_GPIO_WritePin>
 80009f0:	e005      	b.n	80009fe <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009f8:	4810      	ldr	r0, [pc, #64]	@ (8000a3c <LCD_DATA+0x148>)
 80009fa:	f001 fb27 	bl	800204c <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	da06      	bge.n	8000a14 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <LCD_DATA+0x140>)
 8000a0e:	f001 fb1d 	bl	800204c <HAL_GPIO_WritePin>
 8000a12:	e005      	b.n	8000a20 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1a:	4806      	ldr	r0, [pc, #24]	@ (8000a34 <LCD_DATA+0x140>)
 8000a1c:	f001 fb16 	bl	800204c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2102      	movs	r1, #2
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <LCD_DATA+0x140>)
 8000a26:	f001 fb11 	bl	800204c <HAL_GPIO_WritePin>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020400 	.word	0x40020400

08000a40 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8000a4e:	202a      	movs	r0, #42	@ 0x2a
 8000a50:	f7ff feaa 	bl	80007a8 <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff4a 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x1);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff45 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff3f 	bl	80008f4 <LCD_DATA>
	LCD_DATA(x2);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff3a 	bl	80008f4 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8000a80:	202b      	movs	r0, #43	@ 0x2b
 8000a82:	f7ff fe91 	bl	80007a8 <LCD_CMD>
	LCD_DATA(y1 >> 8);
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff31 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y1);
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff2c 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff26 	bl	80008f4 <LCD_DATA>
	LCD_DATA(y2);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff21 	bl	80008f4 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8000ab2:	202c      	movs	r0, #44	@ 0x2c
 8000ab4:	f7ff fe78 	bl	80007a8 <LCD_CMD>
}
 8000ab8:	bf00      	nop
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <FillRect>:
 }
 }
 */

void FillRect(unsigned int x, unsigned int y, unsigned int w, unsigned int h,
		unsigned int c) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
 8000acc:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000ace:	202c      	movs	r0, #44	@ 0x2c
 8000ad0:	f7ff fe6a 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2110      	movs	r1, #16
 8000ad8:	4824      	ldr	r0, [pc, #144]	@ (8000b6c <FillRect+0xac>)
 8000ada:	f001 fab7 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4823      	ldr	r0, [pc, #140]	@ (8000b70 <FillRect+0xb0>)
 8000ae4:	f001 fab2 	bl	800204c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + w;
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]
	y2 = y + h;
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4413      	add	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	1e5a      	subs	r2, r3, #1
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f7ff ff9c 	bl	8000a40 <SetWindows>
	unsigned int k = w * h * 2 - 1;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	3b01      	subs	r3, #1
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < w; i++) {
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	e01a      	b.n	8000b52 <FillRect+0x92>
		for (int j = 0; j < h; j++) {
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	e010      	b.n	8000b44 <FillRect+0x84>
			LCD_DATA(c >> 8);
 8000b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fee3 	bl	80008f4 <LCD_DATA>
			LCD_DATA(c);
 8000b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fede 	bl	80008f4 <LCD_DATA>

			//LCD_DATA(bitmap[k]);
			k = k - 2;
 8000b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b3a:	3b02      	subs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < h; j++) {
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	683a      	ldr	r2, [r7, #0]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8ea      	bhi.n	8000b22 <FillRect+0x62>
	for (int i = 0; i < w; i++) {
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	6a3b      	ldr	r3, [r7, #32]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d8e0      	bhi.n	8000b1c <FillRect+0x5c>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <FillRect+0xb0>)
 8000b60:	f001 fa74 	bl	800204c <HAL_GPIO_WritePin>
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400

08000b74 <LCD_Print>:
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 8000b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b78:	b093      	sub	sp, #76	@ 0x4c
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	466b      	mov	r3, sp
 8000b86:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d103      	bne.n	8000b96 <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 8000b92:	230c      	movs	r3, #12
 8000b94:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d103      	bne.n	8000ba4 <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b03      	cmp	r3, #3
 8000ba8:	d103      	bne.n	8000bb2 <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8000baa:	2320      	movs	r3, #32
 8000bac:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8000bae:	2332      	movs	r3, #50	@ 0x32
 8000bb0:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fb2c 	bl	8000210 <strlen>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bbe:	1c59      	adds	r1, r3, #1
 8000bc0:	1e4b      	subs	r3, r1, #1
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	460a      	mov	r2, r1
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	4690      	mov	r8, r2
 8000bca:	4699      	mov	r9, r3
 8000bcc:	f04f 0200 	mov.w	r2, #0
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000bdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000be0:	460a      	mov	r2, r1
 8000be2:	2300      	movs	r3, #0
 8000be4:	4614      	mov	r4, r2
 8000be6:	461d      	mov	r5, r3
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	f04f 0300 	mov.w	r3, #0
 8000bf0:	00eb      	lsls	r3, r5, #3
 8000bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000bf6:	00e2      	lsls	r2, r4, #3
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	3307      	adds	r3, #7
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	ebad 0d03 	sub.w	sp, sp, r3
 8000c04:	466b      	mov	r3, sp
 8000c06:	3300      	adds	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c0e:	e00b      	b.n	8000c28 <LCD_Print+0xb4>
		char_array[i]=text[i];
 8000c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4413      	add	r3, r2
 8000c16:	7819      	ldrb	r1, [r3, #0]
 8000c18:	69fa      	ldr	r2, [r7, #28]
 8000c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c1c:	4413      	add	r3, r2
 8000c1e:	460a      	mov	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 8000c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c24:	3301      	adds	r3, #1
 8000c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1ed      	bne.n	8000c10 <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c38:	e077      	b.n	8000d2a <LCD_Print+0x1b6>
		charInput = char_array[i];
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 8000c44:	7efb      	ldrb	r3, [r7, #27]
 8000c46:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	483c      	ldr	r0, [pc, #240]	@ (8000d40 <LCD_Print+0x1cc>)
 8000c4e:	f001 f9fd 	bl	800204c <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 8000c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c56:	fb03 f202 	mul.w	r2, r3, r2
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c66:	fb03 f202 	mul.w	r2, r3, r2
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	441a      	add	r2, r3
 8000c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c70:	4413      	add	r3, r2
 8000c72:	3b01      	subs	r3, #1
 8000c74:	461c      	mov	r4, r3
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4622      	mov	r2, r4
 8000c7e:	f7ff fedf 	bl	8000a40 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c86:	e044      	b.n	8000d12 <LCD_Print+0x19e>
			if (fontSize == 1) {
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10b      	bne.n	8000ca6 <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3b20      	subs	r3, #32
 8000c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a29      	ldr	r2, [pc, #164]	@ (8000d44 <LCD_Print+0x1d0>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d10c      	bne.n	8000cc6 <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	3b20      	subs	r3, #32
 8000cb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cb2:	fb02 f303 	mul.w	r3, r2, r3
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cba:	4413      	add	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4a22      	ldr	r2, [pc, #136]	@ (8000d48 <LCD_Print+0x1d4>)
 8000cc0:	4413      	add	r3, r2
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cca:	e01b      	b.n	8000d04 <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8000ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	409a      	lsls	r2, r3
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	dd02      	ble.n	8000ce4 <LCD_Print+0x170>
					c = color;
 8000cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ce2:	e001      	b.n	8000ce8 <LCD_Print+0x174>
				} else {
					c = background;
 8000ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8000ce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cea:	121b      	asrs	r3, r3, #8
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fe00 	bl	80008f4 <LCD_DATA>
				LCD_DATA(c);
 8000cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fdfb 	bl	80008f4 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 8000cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d00:	3301      	adds	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dadf      	bge.n	8000ccc <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 8000d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d0e:	3301      	adds	r3, #1
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d16:	429a      	cmp	r2, r3
 8000d18:	dbb6      	blt.n	8000c88 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4808      	ldr	r0, [pc, #32]	@ (8000d40 <LCD_Print+0x1cc>)
 8000d20:	f001 f994 	bl	800204c <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 8000d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d26:	3301      	adds	r3, #1
 8000d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	db83      	blt.n	8000c3a <LCD_Print+0xc6>
 8000d32:	46b5      	mov	sp, r6
	}
}
 8000d34:	bf00      	nop
 8000d36:	374c      	adds	r7, #76	@ 0x4c
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d3e:	bf00      	nop
 8000d40:	40020400 	.word	0x40020400
 8000d44:	08003ed4 	.word	0x08003ed4
 8000d48:	08004348 	.word	0x08004348

08000d4c <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8000d5a:	202c      	movs	r0, #44	@ 0x2c
 8000d5c:	f7ff fd24 	bl	80007a8 <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4824      	ldr	r0, [pc, #144]	@ (8000df8 <LCD_Bitmap+0xac>)
 8000d66:	f001 f971 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4823      	ldr	r0, [pc, #140]	@ (8000dfc <LCD_Bitmap+0xb0>)
 8000d70:	f001 f96c 	bl	800204c <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8000d7c:	68ba      	ldr	r2, [r7, #8]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	1e5a      	subs	r2, r3, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff fe56 	bl	8000a40 <SetWindows>
	unsigned int k = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	e01e      	b.n	8000ddc <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e014      	b.n	8000dce <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 8000da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fda1 	bl	80008f4 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 8000db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db4:	3301      	adds	r3, #1
 8000db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000db8:	4413      	add	r3, r2
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fd99 	bl	80008f4 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d8e6      	bhi.n	8000da4 <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	623b      	str	r3, [r7, #32]
 8000ddc:	6a3b      	ldr	r3, [r7, #32]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8dc      	bhi.n	8000d9e <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	4804      	ldr	r0, [pc, #16]	@ (8000dfc <LCD_Bitmap+0xb0>)
 8000dea:	f001 f92f 	bl	800204c <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	3728      	adds	r7, #40	@ 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400

08000e00 <Display_ShowZero>:

// Funciones para mostrar números en el display de 7 segmentos
// Función para mostrar "0" en el display de 7 segmentos
// Función para mostrar "0" en el display de 7 segmentos (ánodo común)
// Función para mostrar "0" en el display de 7 segmentos
void Display_ShowZero() {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Segmento A
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4812      	ldr	r0, [pc, #72]	@ (8000e54 <Display_ShowZero+0x54>)
 8000e0c:	f001 f91e 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);  // Segmento B
 8000e10:	2200      	movs	r2, #0
 8000e12:	2120      	movs	r1, #32
 8000e14:	4810      	ldr	r0, [pc, #64]	@ (8000e58 <Display_ShowZero+0x58>)
 8000e16:	f001 f919 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // Segmento C
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	480d      	ldr	r0, [pc, #52]	@ (8000e54 <Display_ShowZero+0x54>)
 8000e20:	f001 f914 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // Segmento D
 8000e24:	2200      	movs	r2, #0
 8000e26:	2104      	movs	r1, #4
 8000e28:	480a      	ldr	r0, [pc, #40]	@ (8000e54 <Display_ShowZero+0x54>)
 8000e2a:	f001 f90f 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // Segmento E
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e34:	4807      	ldr	r0, [pc, #28]	@ (8000e54 <Display_ShowZero+0x54>)
 8000e36:	f001 f909 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Segmento F
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <Display_ShowZero+0x54>)
 8000e42:	f001 f903 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);    // Segmento G apagado
 8000e46:	2201      	movs	r2, #1
 8000e48:	2140      	movs	r1, #64	@ 0x40
 8000e4a:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <Display_ShowZero+0x58>)
 8000e4c:	f001 f8fe 	bl	800204c <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40020800 	.word	0x40020800

08000e5c <Display_ShowOne>:

// Función para mostrar "1" en el display de 7 segmentos
void Display_ShowOne() {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // Segmento A apagado
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e66:	4812      	ldr	r0, [pc, #72]	@ (8000eb0 <Display_ShowOne+0x54>)
 8000e68:	f001 f8f0 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);  // Segmento B
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2120      	movs	r1, #32
 8000e70:	4810      	ldr	r0, [pc, #64]	@ (8000eb4 <Display_ShowOne+0x58>)
 8000e72:	f001 f8eb 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // Segmento C
 8000e76:	2200      	movs	r2, #0
 8000e78:	2102      	movs	r1, #2
 8000e7a:	480d      	ldr	r0, [pc, #52]	@ (8000eb0 <Display_ShowOne+0x54>)
 8000e7c:	f001 f8e6 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);    // Segmento D apagado
 8000e80:	2201      	movs	r2, #1
 8000e82:	2104      	movs	r1, #4
 8000e84:	480a      	ldr	r0, [pc, #40]	@ (8000eb0 <Display_ShowOne+0x54>)
 8000e86:	f001 f8e1 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // Segmento E apagado
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e90:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <Display_ShowOne+0x54>)
 8000e92:	f001 f8db 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);   // Segmento F apagado
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e9c:	4804      	ldr	r0, [pc, #16]	@ (8000eb0 <Display_ShowOne+0x54>)
 8000e9e:	f001 f8d5 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);    // Segmento G apagado
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2140      	movs	r1, #64	@ 0x40
 8000ea6:	4803      	ldr	r0, [pc, #12]	@ (8000eb4 <Display_ShowOne+0x58>)
 8000ea8:	f001 f8d0 	bl	800204c <HAL_GPIO_WritePin>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40020400 	.word	0x40020400
 8000eb4:	40020800 	.word	0x40020800

08000eb8 <Display_ShowTwo>:

// Función para mostrar "2" en el display de 7 segmentos
void Display_ShowTwo() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Segmento A
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ec2:	4812      	ldr	r0, [pc, #72]	@ (8000f0c <Display_ShowTwo+0x54>)
 8000ec4:	f001 f8c2 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);  // Segmento B
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4810      	ldr	r0, [pc, #64]	@ (8000f10 <Display_ShowTwo+0x58>)
 8000ece:	f001 f8bd 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    // Segmento C apagado
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <Display_ShowTwo+0x54>)
 8000ed8:	f001 f8b8 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // Segmento D
 8000edc:	2200      	movs	r2, #0
 8000ede:	2104      	movs	r1, #4
 8000ee0:	480a      	ldr	r0, [pc, #40]	@ (8000f0c <Display_ShowTwo+0x54>)
 8000ee2:	f001 f8b3 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); // Segmento E
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eec:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <Display_ShowTwo+0x54>)
 8000eee:	f001 f8ad 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);   // Segmento F apagado
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ef8:	4804      	ldr	r0, [pc, #16]	@ (8000f0c <Display_ShowTwo+0x54>)
 8000efa:	f001 f8a7 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Segmento G
 8000efe:	2200      	movs	r2, #0
 8000f00:	2140      	movs	r1, #64	@ 0x40
 8000f02:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <Display_ShowTwo+0x58>)
 8000f04:	f001 f8a2 	bl	800204c <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	40020800 	.word	0x40020800

08000f14 <Display_ShowThree>:

// Función para mostrar "3" en el display de 7 segmentos
void Display_ShowThree() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // Segmento A
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1e:	4812      	ldr	r0, [pc, #72]	@ (8000f68 <Display_ShowThree+0x54>)
 8000f20:	f001 f894 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);  // Segmento B
 8000f24:	2200      	movs	r2, #0
 8000f26:	2120      	movs	r1, #32
 8000f28:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <Display_ShowThree+0x58>)
 8000f2a:	f001 f88f 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // Segmento C
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2102      	movs	r1, #2
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <Display_ShowThree+0x54>)
 8000f34:	f001 f88a 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  // Segmento D
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <Display_ShowThree+0x54>)
 8000f3e:	f001 f885 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // Segmento E apagado
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <Display_ShowThree+0x54>)
 8000f4a:	f001 f87f 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);   // Segmento F apagado
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <Display_ShowThree+0x54>)
 8000f56:	f001 f879 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Segmento G
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	@ 0x40
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <Display_ShowThree+0x58>)
 8000f60:	f001 f874 	bl	800204c <HAL_GPIO_WritePin>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020400 	.word	0x40020400
 8000f6c:	40020800 	.word	0x40020800

08000f70 <Display_ShowFour>:

// Función para mostrar "4" en el display de 7 segmentos
void Display_ShowFour() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);   // Segmento A apagado
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f7a:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <Display_ShowFour+0x54>)
 8000f7c:	f001 f866 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);  // Segmento B
 8000f80:	2200      	movs	r2, #0
 8000f82:	2120      	movs	r1, #32
 8000f84:	4810      	ldr	r0, [pc, #64]	@ (8000fc8 <Display_ShowFour+0x58>)
 8000f86:	f001 f861 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);  // Segmento C
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <Display_ShowFour+0x54>)
 8000f90:	f001 f85c 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);    // Segmento D apagado
 8000f94:	2201      	movs	r2, #1
 8000f96:	2104      	movs	r1, #4
 8000f98:	480a      	ldr	r0, [pc, #40]	@ (8000fc4 <Display_ShowFour+0x54>)
 8000f9a:	f001 f857 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);   // Segmento E apagado
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <Display_ShowFour+0x54>)
 8000fa6:	f001 f851 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Segmento F
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <Display_ShowFour+0x54>)
 8000fb2:	f001 f84b 	bl	800204c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Segmento G
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2140      	movs	r1, #64	@ 0x40
 8000fba:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <Display_ShowFour+0x58>)
 8000fbc:	f001 f846 	bl	800204c <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f000 fd13 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f9e9 	bl	80013ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f000 fab7 	bl	800154c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fde:	f000 fa7f 	bl	80014e0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000fe2:	f000 fa4f 	bl	8001484 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Inicializar la pantalla
  LCD_Init();
 8000fe6:	f7ff fae3 	bl	80005b0 <LCD_Init>
  FillRect(0, 0, 320, 240, 0x0000); // Fondo negro
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	23f0      	movs	r3, #240	@ 0xf0
 8000ff0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fd62 	bl	8000ac0 <FillRect>

  // Mostrar los carros en sus posiciones iniciales
  LCD_Bitmap(150, 30, 70, 70, carro1);  // Carro 1
 8000ffc:	4bc0      	ldr	r3, [pc, #768]	@ (8001300 <main+0x334>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2346      	movs	r3, #70	@ 0x46
 8001002:	2246      	movs	r2, #70	@ 0x46
 8001004:	211e      	movs	r1, #30
 8001006:	2096      	movs	r0, #150	@ 0x96
 8001008:	f7ff fea0 	bl	8000d4c <LCD_Bitmap>
  LCD_Bitmap(160, 160, 50, 50, carro2); // Carro 2
 800100c:	4bbd      	ldr	r3, [pc, #756]	@ (8001304 <main+0x338>)
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2332      	movs	r3, #50	@ 0x32
 8001012:	2232      	movs	r2, #50	@ 0x32
 8001014:	21a0      	movs	r1, #160	@ 0xa0
 8001016:	20a0      	movs	r0, #160	@ 0xa0
 8001018:	f7ff fe98 	bl	8000d4c <LCD_Bitmap>
  LCD_Bitmap(40, 30, 70, 70, carro3);   // Carro 3
 800101c:	4bba      	ldr	r3, [pc, #744]	@ (8001308 <main+0x33c>)
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2346      	movs	r3, #70	@ 0x46
 8001022:	2246      	movs	r2, #70	@ 0x46
 8001024:	211e      	movs	r1, #30
 8001026:	2028      	movs	r0, #40	@ 0x28
 8001028:	f7ff fe90 	bl	8000d4c <LCD_Bitmap>
  LCD_Bitmap(40, 150, 80, 80, carro4);  // Carro 4
 800102c:	4bb7      	ldr	r3, [pc, #732]	@ (800130c <main+0x340>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2350      	movs	r3, #80	@ 0x50
 8001032:	2250      	movs	r2, #80	@ 0x50
 8001034:	2196      	movs	r1, #150	@ 0x96
 8001036:	2028      	movs	r0, #40	@ 0x28
 8001038:	f7ff fe88 	bl	8000d4c <LCD_Bitmap>

  // Líneas amarillas para cada espacio de estacionamiento
  // Configuración de las líneas amarillas para cada carro...

  // Mostrar el texto "Disponibles" en la parte derecha y el contador debajo
  LCD_Print("Disponibles", 225, 120, 1, yellow, 0x0000); // Texto en la derecha
 800103c:	4bb4      	ldr	r3, [pc, #720]	@ (8001310 <main+0x344>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	2300      	movs	r3, #0
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	9200      	str	r2, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2278      	movs	r2, #120	@ 0x78
 800104c:	21e1      	movs	r1, #225	@ 0xe1
 800104e:	48b1      	ldr	r0, [pc, #708]	@ (8001314 <main+0x348>)
 8001050:	f7ff fd90 	bl	8000b74 <LCD_Print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
          parqueos_disponibles = 4;
 8001054:	4bb0      	ldr	r3, [pc, #704]	@ (8001318 <main+0x34c>)
 8001056:	2204      	movs	r2, #4
 8001058:	601a      	str	r2, [r3, #0]

          // Carro 1
          GPIO_PinState sensor1State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 800105a:	2110      	movs	r1, #16
 800105c:	48af      	ldr	r0, [pc, #700]	@ (800131c <main+0x350>)
 800105e:	f000 ffdd 	bl	800201c <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
          if (sensor1State == GPIO_PIN_RESET) {
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d125      	bne.n	80010b8 <main+0xec>
              sensorStates[0] = 1; // Ocupado
 800106c:	4bac      	ldr	r3, [pc, #688]	@ (8001320 <main+0x354>)
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
              LCD_Bitmap(150, 30, 70, 70, carro1);
 8001072:	4ba3      	ldr	r3, [pc, #652]	@ (8001300 <main+0x334>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2346      	movs	r3, #70	@ 0x46
 8001078:	2246      	movs	r2, #70	@ 0x46
 800107a:	211e      	movs	r1, #30
 800107c:	2096      	movs	r0, #150	@ 0x96
 800107e:	f7ff fe65 	bl	8000d4c <LCD_Bitmap>
              FillRect(155, 110, 20, 20, red);
 8001082:	4ba8      	ldr	r3, [pc, #672]	@ (8001324 <main+0x358>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2314      	movs	r3, #20
 800108a:	2214      	movs	r2, #20
 800108c:	216e      	movs	r1, #110	@ 0x6e
 800108e:	209b      	movs	r0, #155	@ 0x9b
 8001090:	f7ff fd16 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);  // LED ROJO Carro 1
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109a:	48a0      	ldr	r0, [pc, #640]	@ (800131c <main+0x350>)
 800109c:	f000 ffd6 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // LED VERDE Carro 1
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010a6:	48a0      	ldr	r0, [pc, #640]	@ (8001328 <main+0x35c>)
 80010a8:	f000 ffd0 	bl	800204c <HAL_GPIO_WritePin>
              parqueos_disponibles--;
 80010ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001318 <main+0x34c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	4a99      	ldr	r2, [pc, #612]	@ (8001318 <main+0x34c>)
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01f      	b.n	80010f8 <main+0x12c>
          } else {
              sensorStates[0] = 0; // Disponible
 80010b8:	4b99      	ldr	r3, [pc, #612]	@ (8001320 <main+0x354>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
              FillRect(150, 30, 70, 70, 0x0000);
 80010be:	2300      	movs	r3, #0
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2346      	movs	r3, #70	@ 0x46
 80010c4:	2246      	movs	r2, #70	@ 0x46
 80010c6:	211e      	movs	r1, #30
 80010c8:	2096      	movs	r0, #150	@ 0x96
 80010ca:	f7ff fcf9 	bl	8000ac0 <FillRect>
              FillRect(155, 110, 20, 20, green);
 80010ce:	4b97      	ldr	r3, [pc, #604]	@ (800132c <main+0x360>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2314      	movs	r3, #20
 80010d6:	2214      	movs	r2, #20
 80010d8:	216e      	movs	r1, #110	@ 0x6e
 80010da:	209b      	movs	r0, #155	@ 0x9b
 80010dc:	f7ff fcf0 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e6:	488d      	ldr	r0, [pc, #564]	@ (800131c <main+0x350>)
 80010e8:	f000 ffb0 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f2:	488d      	ldr	r0, [pc, #564]	@ (8001328 <main+0x35c>)
 80010f4:	f000 ffaa 	bl	800204c <HAL_GPIO_WritePin>
          }

          // Carro 2
          GPIO_PinState sensor2State = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 80010f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010fc:	488a      	ldr	r0, [pc, #552]	@ (8001328 <main+0x35c>)
 80010fe:	f000 ff8d 	bl	800201c <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	71bb      	strb	r3, [r7, #6]
          if (sensor2State == GPIO_PIN_RESET) {
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d124      	bne.n	8001156 <main+0x18a>
              sensorStates[1] = 1;
 800110c:	4b84      	ldr	r3, [pc, #528]	@ (8001320 <main+0x354>)
 800110e:	2201      	movs	r2, #1
 8001110:	705a      	strb	r2, [r3, #1]
              LCD_Bitmap(160, 160, 50, 50, carro2);
 8001112:	4b7c      	ldr	r3, [pc, #496]	@ (8001304 <main+0x338>)
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2332      	movs	r3, #50	@ 0x32
 8001118:	2232      	movs	r2, #50	@ 0x32
 800111a:	21a0      	movs	r1, #160	@ 0xa0
 800111c:	20a0      	movs	r0, #160	@ 0xa0
 800111e:	f7ff fe15 	bl	8000d4c <LCD_Bitmap>
              FillRect(165, 220, 20, 20, red);
 8001122:	4b80      	ldr	r3, [pc, #512]	@ (8001324 <main+0x358>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2314      	movs	r3, #20
 800112a:	2214      	movs	r2, #20
 800112c:	21dc      	movs	r1, #220	@ 0xdc
 800112e:	20a5      	movs	r0, #165	@ 0xa5
 8001130:	f7ff fcc6 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800113a:	487d      	ldr	r0, [pc, #500]	@ (8001330 <main+0x364>)
 800113c:	f000 ff86 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2108      	movs	r1, #8
 8001144:	4875      	ldr	r0, [pc, #468]	@ (800131c <main+0x350>)
 8001146:	f000 ff81 	bl	800204c <HAL_GPIO_WritePin>
              parqueos_disponibles--;
 800114a:	4b73      	ldr	r3, [pc, #460]	@ (8001318 <main+0x34c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	4a71      	ldr	r2, [pc, #452]	@ (8001318 <main+0x34c>)
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e01e      	b.n	8001194 <main+0x1c8>
          } else {
              sensorStates[1] = 0;
 8001156:	4b72      	ldr	r3, [pc, #456]	@ (8001320 <main+0x354>)
 8001158:	2200      	movs	r2, #0
 800115a:	705a      	strb	r2, [r3, #1]
              FillRect(160, 160, 50, 50, 0x0000);
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2332      	movs	r3, #50	@ 0x32
 8001162:	2232      	movs	r2, #50	@ 0x32
 8001164:	21a0      	movs	r1, #160	@ 0xa0
 8001166:	20a0      	movs	r0, #160	@ 0xa0
 8001168:	f7ff fcaa 	bl	8000ac0 <FillRect>
              FillRect(165, 220, 20, 20, green);
 800116c:	4b6f      	ldr	r3, [pc, #444]	@ (800132c <main+0x360>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2314      	movs	r3, #20
 8001174:	2214      	movs	r2, #20
 8001176:	21dc      	movs	r1, #220	@ 0xdc
 8001178:	20a5      	movs	r0, #165	@ 0xa5
 800117a:	f7ff fca1 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001184:	486a      	ldr	r0, [pc, #424]	@ (8001330 <main+0x364>)
 8001186:	f000 ff61 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2108      	movs	r1, #8
 800118e:	4863      	ldr	r0, [pc, #396]	@ (800131c <main+0x350>)
 8001190:	f000 ff5c 	bl	800204c <HAL_GPIO_WritePin>
          }

          // Carro 3
          GPIO_PinState sensor3State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 8001194:	2104      	movs	r1, #4
 8001196:	4861      	ldr	r0, [pc, #388]	@ (800131c <main+0x350>)
 8001198:	f000 ff40 	bl	800201c <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	717b      	strb	r3, [r7, #5]
          if (sensor3State == GPIO_PIN_RESET) {
 80011a0:	797b      	ldrb	r3, [r7, #5]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d125      	bne.n	80011f2 <main+0x226>
              sensorStates[2] = 1;
 80011a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001320 <main+0x354>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	709a      	strb	r2, [r3, #2]
              LCD_Bitmap(40, 30, 70, 70, carro3);
 80011ac:	4b56      	ldr	r3, [pc, #344]	@ (8001308 <main+0x33c>)
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2346      	movs	r3, #70	@ 0x46
 80011b2:	2246      	movs	r2, #70	@ 0x46
 80011b4:	211e      	movs	r1, #30
 80011b6:	2028      	movs	r0, #40	@ 0x28
 80011b8:	f7ff fdc8 	bl	8000d4c <LCD_Bitmap>
              FillRect(50, 110, 20, 20, red);
 80011bc:	4b59      	ldr	r3, [pc, #356]	@ (8001324 <main+0x358>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2314      	movs	r3, #20
 80011c4:	2214      	movs	r2, #20
 80011c6:	216e      	movs	r1, #110	@ 0x6e
 80011c8:	2032      	movs	r0, #50	@ 0x32
 80011ca:	f7ff fc79 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d4:	4851      	ldr	r0, [pc, #324]	@ (800131c <main+0x350>)
 80011d6:	f000 ff39 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e0:	484e      	ldr	r0, [pc, #312]	@ (800131c <main+0x350>)
 80011e2:	f000 ff33 	bl	800204c <HAL_GPIO_WritePin>
              parqueos_disponibles--;
 80011e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001318 <main+0x34c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	4a4a      	ldr	r2, [pc, #296]	@ (8001318 <main+0x34c>)
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e01f      	b.n	8001232 <main+0x266>
          } else {
              sensorStates[2] = 0;
 80011f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001320 <main+0x354>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	709a      	strb	r2, [r3, #2]
              FillRect(40, 30, 70, 70, 0x0000);
 80011f8:	2300      	movs	r3, #0
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2346      	movs	r3, #70	@ 0x46
 80011fe:	2246      	movs	r2, #70	@ 0x46
 8001200:	211e      	movs	r1, #30
 8001202:	2028      	movs	r0, #40	@ 0x28
 8001204:	f7ff fc5c 	bl	8000ac0 <FillRect>
              FillRect(50, 110, 20, 20, green);
 8001208:	4b48      	ldr	r3, [pc, #288]	@ (800132c <main+0x360>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2314      	movs	r3, #20
 8001210:	2214      	movs	r2, #20
 8001212:	216e      	movs	r1, #110	@ 0x6e
 8001214:	2032      	movs	r0, #50	@ 0x32
 8001216:	f7ff fc53 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001220:	483e      	ldr	r0, [pc, #248]	@ (800131c <main+0x350>)
 8001222:	f000 ff13 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8001226:	2201      	movs	r2, #1
 8001228:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800122c:	483b      	ldr	r0, [pc, #236]	@ (800131c <main+0x350>)
 800122e:	f000 ff0d 	bl	800204c <HAL_GPIO_WritePin>
          }

          // Carro 4
          GPIO_PinState sensor4State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 8001232:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001236:	4839      	ldr	r0, [pc, #228]	@ (800131c <main+0x350>)
 8001238:	f000 fef0 	bl	800201c <HAL_GPIO_ReadPin>
 800123c:	4603      	mov	r3, r0
 800123e:	713b      	strb	r3, [r7, #4]
          if (sensor4State == GPIO_PIN_RESET) {
 8001240:	793b      	ldrb	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d124      	bne.n	8001290 <main+0x2c4>
              sensorStates[3] = 1;
 8001246:	4b36      	ldr	r3, [pc, #216]	@ (8001320 <main+0x354>)
 8001248:	2201      	movs	r2, #1
 800124a:	70da      	strb	r2, [r3, #3]
              LCD_Bitmap(40, 150, 80, 80, carro4);
 800124c:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <main+0x340>)
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2350      	movs	r3, #80	@ 0x50
 8001252:	2250      	movs	r2, #80	@ 0x50
 8001254:	2196      	movs	r1, #150	@ 0x96
 8001256:	2028      	movs	r0, #40	@ 0x28
 8001258:	f7ff fd78 	bl	8000d4c <LCD_Bitmap>
              FillRect(50, 220, 20, 20, red);
 800125c:	4b31      	ldr	r3, [pc, #196]	@ (8001324 <main+0x358>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2314      	movs	r3, #20
 8001264:	2214      	movs	r2, #20
 8001266:	21dc      	movs	r1, #220	@ 0xdc
 8001268:	2032      	movs	r0, #50	@ 0x32
 800126a:	f7ff fc29 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001274:	4829      	ldr	r0, [pc, #164]	@ (800131c <main+0x350>)
 8001276:	f000 fee9 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	2104      	movs	r1, #4
 800127e:	482d      	ldr	r0, [pc, #180]	@ (8001334 <main+0x368>)
 8001280:	f000 fee4 	bl	800204c <HAL_GPIO_WritePin>
              parqueos_disponibles--;
 8001284:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <main+0x34c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	4a23      	ldr	r2, [pc, #140]	@ (8001318 <main+0x34c>)
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01e      	b.n	80012ce <main+0x302>
          } else {
              sensorStates[3] = 0;
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <main+0x354>)
 8001292:	2200      	movs	r2, #0
 8001294:	70da      	strb	r2, [r3, #3]
              FillRect(40, 150, 80, 80, 0x0000);
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2350      	movs	r3, #80	@ 0x50
 800129c:	2250      	movs	r2, #80	@ 0x50
 800129e:	2196      	movs	r1, #150	@ 0x96
 80012a0:	2028      	movs	r0, #40	@ 0x28
 80012a2:	f7ff fc0d 	bl	8000ac0 <FillRect>
              FillRect(50, 220, 20, 20, green);
 80012a6:	4b21      	ldr	r3, [pc, #132]	@ (800132c <main+0x360>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2314      	movs	r3, #20
 80012ae:	2214      	movs	r2, #20
 80012b0:	21dc      	movs	r1, #220	@ 0xdc
 80012b2:	2032      	movs	r0, #50	@ 0x32
 80012b4:	f7ff fc04 	bl	8000ac0 <FillRect>
              HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012be:	4817      	ldr	r0, [pc, #92]	@ (800131c <main+0x350>)
 80012c0:	f000 fec4 	bl	800204c <HAL_GPIO_WritePin>
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2104      	movs	r1, #4
 80012c8:	481a      	ldr	r0, [pc, #104]	@ (8001334 <main+0x368>)
 80012ca:	f000 febf 	bl	800204c <HAL_GPIO_WritePin>
          }

          // Asegurarse de que el contador no sea negativo
          if (parqueos_disponibles < 0) parqueos_disponibles = 0;
 80012ce:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <main+0x34c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da02      	bge.n	80012dc <main+0x310>
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <main+0x34c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]

          // Actualizar el display de 7 segmentos
          switch(parqueos_disponibles) {
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <main+0x34c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d838      	bhi.n	8001356 <main+0x38a>
 80012e4:	a201      	add	r2, pc, #4	@ (adr r2, 80012ec <main+0x320>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	08001351 	.word	0x08001351
 80012f0:	0800134b 	.word	0x0800134b
 80012f4:	08001345 	.word	0x08001345
 80012f8:	0800133f 	.word	0x0800133f
 80012fc:	08001339 	.word	0x08001339
 8001300:	20000000 	.word	0x20000000
 8001304:	20002648 	.word	0x20002648
 8001308:	200039d0 	.word	0x200039d0
 800130c:	20006018 	.word	0x20006018
 8001310:	20009218 	.word	0x20009218
 8001314:	08003ec4 	.word	0x08003ec4
 8001318:	20009224 	.word	0x20009224
 800131c:	40020800 	.word	0x40020800
 8001320:	2000934c 	.word	0x2000934c
 8001324:	2000921c 	.word	0x2000921c
 8001328:	40020000 	.word	0x40020000
 800132c:	20009220 	.word	0x20009220
 8001330:	40020400 	.word	0x40020400
 8001334:	40020c00 	.word	0x40020c00
              case 4: Display_ShowFour(); break;
 8001338:	f7ff fe1a 	bl	8000f70 <Display_ShowFour>
 800133c:	e00b      	b.n	8001356 <main+0x38a>
              case 3: Display_ShowThree(); break;
 800133e:	f7ff fde9 	bl	8000f14 <Display_ShowThree>
 8001342:	e008      	b.n	8001356 <main+0x38a>
              case 2: Display_ShowTwo(); break;
 8001344:	f7ff fdb8 	bl	8000eb8 <Display_ShowTwo>
 8001348:	e005      	b.n	8001356 <main+0x38a>
              case 1: Display_ShowOne(); break;
 800134a:	f7ff fd87 	bl	8000e5c <Display_ShowOne>
 800134e:	e002      	b.n	8001356 <main+0x38a>
              case 0: Display_ShowZero(); break;
 8001350:	f7ff fd56 	bl	8000e00 <Display_ShowZero>
 8001354:	bf00      	nop
          }

          // Enviar los estados de los sensores al ESP32 a través de I2C
          HAL_I2C_Master_Transmit(&hi2c1, (0x08 << 1), sensorStates, 4, HAL_MAX_DELAY);
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2304      	movs	r3, #4
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <main+0x3cc>)
 8001360:	2110      	movs	r1, #16
 8001362:	480e      	ldr	r0, [pc, #56]	@ (800139c <main+0x3d0>)
 8001364:	f000 ffd0 	bl	8002308 <HAL_I2C_Master_Transmit>

          // Actualizar el contador de parqueos disponibles en pantalla LCD
          char display_text[2];
          sprintf(display_text, "%d", parqueos_disponibles);
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <main+0x3d4>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	463b      	mov	r3, r7
 800136e:	490d      	ldr	r1, [pc, #52]	@ (80013a4 <main+0x3d8>)
 8001370:	4618      	mov	r0, r3
 8001372:	f002 f8fb 	bl	800356c <siprintf>
          LCD_Print(display_text, 270, 135, 1, yellow, 0x0000);
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <main+0x3dc>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	4638      	mov	r0, r7
 800137e:	2300      	movs	r3, #0
 8001380:	9301      	str	r3, [sp, #4]
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	2287      	movs	r2, #135	@ 0x87
 8001388:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 800138c:	f7ff fbf2 	bl	8000b74 <LCD_Print>

          HAL_Delay(100);
 8001390:	2064      	movs	r0, #100	@ 0x64
 8001392:	f000 fba5 	bl	8001ae0 <HAL_Delay>
  while (1) {
 8001396:	e65d      	b.n	8001054 <main+0x88>
 8001398:	2000934c 	.word	0x2000934c
 800139c:	200092a0 	.word	0x200092a0
 80013a0:	20009224 	.word	0x20009224
 80013a4:	08003ed0 	.word	0x08003ed0
 80013a8:	20009218 	.word	0x20009218

080013ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	@ 0x50
 80013b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	2234      	movs	r2, #52	@ 0x34
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 f8f6 	bl	80035ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c0:	f107 0308 	add.w	r3, r7, #8
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4b29      	ldr	r3, [pc, #164]	@ (800147c <SystemClock_Config+0xd0>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	4a28      	ldr	r2, [pc, #160]	@ (800147c <SystemClock_Config+0xd0>)
 80013da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <SystemClock_Config+0xd0>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <SystemClock_Config+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <SystemClock_Config+0xd4>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <SystemClock_Config+0xd4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140c:	2302      	movs	r3, #2
 800140e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001410:	2301      	movs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001414:	2310      	movs	r3, #16
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800141c:	2300      	movs	r3, #0
 800141e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001420:	2308      	movs	r3, #8
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001424:	2350      	movs	r3, #80	@ 0x50
 8001426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001428:	2302      	movs	r3, #2
 800142a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fd6f 	bl	8002f1c <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001444:	f000 f97a 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f001 faa9 	bl	80029bc <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001470:	f000 f964 	bl	800173c <Error_Handler>
  }
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	@ 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001488:	4b12      	ldr	r3, [pc, #72]	@ (80014d4 <MX_I2C1_Init+0x50>)
 800148a:	4a13      	ldr	r2, [pc, #76]	@ (80014d8 <MX_I2C1_Init+0x54>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <MX_I2C1_Init+0x50>)
 8001490:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <MX_I2C1_Init+0x58>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <MX_I2C1_Init+0x50>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_I2C1_Init+0x50>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b4:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	@ (80014d4 <MX_I2C1_Init+0x50>)
 80014c2:	f000 fddd 	bl	8002080 <HAL_I2C_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014cc:	f000 f936 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200092a0 	.word	0x200092a0
 80014d8:	40005400 	.word	0x40005400
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_SPI1_Init+0x64>)
 80014e6:	4a18      	ldr	r2, [pc, #96]	@ (8001548 <MX_SPI1_Init+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <MX_SPI1_Init+0x64>)
 80014ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_SPI1_Init+0x64>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_SPI1_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_SPI1_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_SPI1_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_SPI1_Init+0x64>)
 800150c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001510:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_SPI1_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001518:	4b0a      	ldr	r3, [pc, #40]	@ (8001544 <MX_SPI1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_SPI1_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <MX_SPI1_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_SPI1_Init+0x64>)
 800152c:	220a      	movs	r2, #10
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <MX_SPI1_Init+0x64>)
 8001532:	f001 ff91 	bl	8003458 <HAL_SPI_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800153c:	f000 f8fe 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200092f4 	.word	0x200092f4
 8001548:	40013000 	.word	0x40013000

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b70      	ldr	r3, [pc, #448]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a6f      	ldr	r2, [pc, #444]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b6d      	ldr	r3, [pc, #436]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b69      	ldr	r3, [pc, #420]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a68      	ldr	r2, [pc, #416]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b66      	ldr	r3, [pc, #408]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b62      	ldr	r3, [pc, #392]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a61      	ldr	r2, [pc, #388]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a5a      	ldr	r2, [pc, #360]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b58      	ldr	r3, [pc, #352]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b54      	ldr	r3, [pc, #336]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a53      	ldr	r2, [pc, #332]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015dc:	f043 0308 	orr.w	r3, r3, #8
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b51      	ldr	r3, [pc, #324]	@ (8001728 <MX_GPIO_Init+0x1dc>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|LCD_RST_Pin|GPIO_PIN_3
 80015ee:	2200      	movs	r2, #0
 80015f0:	f24d 71ea 	movw	r1, #55274	@ 0xd7ea
 80015f4:	484d      	ldr	r0, [pc, #308]	@ (800172c <MX_GPIO_Init+0x1e0>)
 80015f6:	f000 fd29 	bl	800204c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|LCD_D1_Pin|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|GPIO_PIN_3|LCD_RS_Pin
 80015fa:	2200      	movs	r2, #0
 80015fc:	f241 711b 	movw	r1, #5915	@ 0x171b
 8001600:	484b      	ldr	r0, [pc, #300]	@ (8001730 <MX_GPIO_Init+0x1e4>)
 8001602:	f000 fd23 	bl	800204c <HAL_GPIO_WritePin>
                          |LCD_D7_Pin|LCD_D0_Pin|LCD_D2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|GPIO_PIN_1|GPIO_PIN_2|LCD_D6_Pin
 8001606:	2200      	movs	r2, #0
 8001608:	f24f 413f 	movw	r1, #62527	@ 0xf43f
 800160c:	4849      	ldr	r0, [pc, #292]	@ (8001734 <MX_GPIO_Init+0x1e8>)
 800160e:	f000 fd1d 	bl	800204c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |LCD_D3_Pin|LCD_D5_Pin|LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2104      	movs	r1, #4
 8001616:	4848      	ldr	r0, [pc, #288]	@ (8001738 <MX_GPIO_Init+0x1ec>)
 8001618:	f000 fd18 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC3 PC5
                           PC6 PC8 PC9 PC10
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_5
 800161c:	f24d 7368 	movw	r3, #55144	@ 0xd768
 8001620:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	483d      	ldr	r0, [pc, #244]	@ (800172c <MX_GPIO_Init+0x1e0>)
 8001636:	f000 fb5d 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 800163a:	2382      	movs	r3, #130	@ 0x82
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001646:	2302      	movs	r3, #2
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4836      	ldr	r0, [pc, #216]	@ (800172c <MX_GPIO_Init+0x1e0>)
 8001652:	f000 fb4f 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC4 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_11;
 8001656:	f640 0314 	movw	r3, #2068	@ 0x814
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4830      	ldr	r0, [pc, #192]	@ (800172c <MX_GPIO_Init+0x1e0>)
 800166c:	f000 fb42 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LCD_D7_Pin
                           LCD_D0_Pin LCD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin
 8001670:	f240 7313 	movw	r3, #1811	@ 0x713
 8001674:	617b      	str	r3, [r7, #20]
                          |LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2302      	movs	r3, #2
 8001680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	4619      	mov	r1, r3
 8001688:	4829      	ldr	r0, [pc, #164]	@ (8001730 <MX_GPIO_Init+0x1e4>)
 800168a:	f000 fb33 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_12;
 800168e:	f241 0308 	movw	r3, #4104	@ 0x1008
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	4822      	ldr	r0, [pc, #136]	@ (8001730 <MX_GPIO_Init+0x1e4>)
 80016a8:	f000 fb24 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
                           LCD_D4_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80016ac:	f240 4339 	movw	r3, #1081	@ 0x439
 80016b0:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b2:	2301      	movs	r3, #1
 80016b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	481b      	ldr	r0, [pc, #108]	@ (8001734 <MX_GPIO_Init+0x1e8>)
 80016c6:	f000 fb15 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80016ca:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80016ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <MX_GPIO_Init+0x1e8>)
 80016e4:	f000 fb06 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	@ (8001730 <MX_GPIO_Init+0x1e4>)
 80016fe:	f000 faf9 	bl	8001cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001702:	2304      	movs	r3, #4
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4807      	ldr	r0, [pc, #28]	@ (8001738 <MX_GPIO_Init+0x1ec>)
 800171a:	f000 faeb 	bl	8001cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	@ 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020c00 	.word	0x40020c00

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	@ (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800175c:	6453      	str	r3, [r2, #68]	@ 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	@ (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	@ 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a19      	ldr	r2, [pc, #100]	@ (800181c <HAL_I2C_MspInit+0x84>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d12b      	bne.n	8001812 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d6:	23c0      	movs	r3, #192	@ 0xc0
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e6:	2304      	movs	r3, #4
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <HAL_I2C_MspInit+0x8c>)
 80017f2:	f000 fa7f 	bl	8001cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 8001800:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_I2C_MspInit+0x88>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40005400 	.word	0x40005400
 8001820:	40023800 	.word	0x40023800
 8001824:	40020400 	.word	0x40020400

08001828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	@ (80018ac <HAL_SPI_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12b      	bne.n	80018a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	4a17      	ldr	r2, [pc, #92]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001854:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001858:	6453      	str	r3, [r2, #68]	@ 0x44
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_SPI_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001882:	23e0      	movs	r3, #224	@ 0xe0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001892:	2305      	movs	r3, #5
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <HAL_SPI_MspInit+0x8c>)
 800189e:	f000 fa29 	bl	8001cf4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40013000 	.word	0x40013000
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <NMI_Handler+0x4>

080018c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <MemManage_Handler+0x4>

080018d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <UsageFault_Handler+0x4>

080018e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800190e:	f000 f8c7 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f001 fe38 	bl	80035bc <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	20009350 	.word	0x20009350
 8001980:	200094a0 	.word	0x200094a0

08001984 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e0 <LoopFillZerobss+0xe>
 80019ac:	f7ff ffea 	bl	8001984 <SystemInit>
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x12>)
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <LoopFillZerobss+0x16>)
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <LoopFillZerobss+0x1a>)
 80019b6:	2300      	movs	r3, #0
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:
 80019ba:	58d4      	ldr	r4, [r2, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:
 80019c0:	18c4      	adds	r4, r0, r3
 80019c2:	428c      	cmp	r4, r1
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <LoopFillZerobss+0x1e>)
 80019c8:	4c0a      	ldr	r4, [pc, #40]	@ (80019f4 <LoopFillZerobss+0x22>)
 80019ca:	2300      	movs	r3, #0
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:
 80019d2:	42a2      	cmp	r2, r4
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>
 80019d6:	f001 fdf7 	bl	80035c8 <__libc_init_array>
 80019da:	f7ff faf7 	bl	8000fcc <main>
 80019de:	4770      	bx	lr
 80019e0:	20020000 	.word	0x20020000
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20009284 	.word	0x20009284
 80019ec:	08004f84 	.word	0x08004f84
 80019f0:	20009284 	.word	0x20009284
 80019f4:	200094a0 	.word	0x200094a0

080019f8 <ADC_IRQHandler>:
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	@ (8001a3c <HAL_Init+0x40>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <HAL_Init+0x40>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	@ (8001a3c <HAL_Init+0x40>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f931 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	200f      	movs	r0, #15
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fe8a 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	@ (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f93b 	bl	8001cda <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f911 	bl	8001ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20009228 	.word	0x20009228
 8001a98:	20009230 	.word	0x20009230
 8001a9c:	2000922c 	.word	0x2000922c

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20009230 	.word	0x20009230
 8001ac4:	20009354 	.word	0x20009354

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20009354 	.word	0x20009354

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20009230 	.word	0x20009230

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	210f      	movs	r1, #15
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff47 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb4:	f7ff ff5c 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7ff ff8e 	bl	8001be0 <NVIC_EncodePriority>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff5d 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cd2:	bf00      	nop
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb0 	bl	8001c48 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b089      	sub	sp, #36	@ 0x24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	e165      	b.n	8001fdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d10:	2201      	movs	r2, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f040 8154 	bne.w	8001fd6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d130      	bne.n	8001da8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	091b      	lsrs	r3, r3, #4
 8001d92:	f003 0201 	and.w	r2, r3, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d017      	beq.n	8001de4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d123      	bne.n	8001e38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	08da      	lsrs	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3208      	adds	r2, #8
 8001df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	08da      	lsrs	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3208      	adds	r2, #8
 8001e32:	69b9      	ldr	r1, [r7, #24]
 8001e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	2203      	movs	r2, #3
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0203 	and.w	r2, r3, #3
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80ae 	beq.w	8001fd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff4 <HAL_GPIO_Init+0x300>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e96:	4a58      	ldr	r2, [pc, #352]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	220f      	movs	r2, #15
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	@ (8001ffc <HAL_GPIO_Init+0x308>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x21a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4e      	ldr	r2, [pc, #312]	@ (8002000 <HAL_GPIO_Init+0x30c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x216>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8002004 <HAL_GPIO_Init+0x310>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x212>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8002008 <HAL_GPIO_Init+0x314>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x20e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4b      	ldr	r2, [pc, #300]	@ (800200c <HAL_GPIO_Init+0x318>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x20a>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4a      	ldr	r2, [pc, #296]	@ (8002010 <HAL_GPIO_Init+0x31c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x206>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <HAL_GPIO_Init+0x320>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x202>
 8001ef2:	2306      	movs	r3, #6
 8001ef4:	e00c      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001ef6:	2307      	movs	r3, #7
 8001ef8:	e00a      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x21c>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	f002 0203 	and.w	r2, r2, #3
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <HAL_GPIO_Init+0x304>)
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f52:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f58:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f7c:	4a26      	ldr	r2, [pc, #152]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f82:	4b25      	ldr	r3, [pc, #148]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd0:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_GPIO_Init+0x324>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0f      	cmp	r3, #15
 8001fe0:	f67f ae96 	bls.w	8001d10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40021400 	.word	0x40021400
 8002014:	40021800 	.word	0x40021800
 8002018:	40013c00 	.word	0x40013c00

0800201c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	460b      	mov	r3, r1
 8002026:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e12b      	b.n	80022ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fb76 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	@ 0x24
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020e4:	f000 fd5c 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a81      	ldr	r2, [pc, #516]	@ (80022f4 <HAL_I2C_Init+0x274>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d807      	bhi.n	8002104 <HAL_I2C_Init+0x84>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a80      	ldr	r2, [pc, #512]	@ (80022f8 <HAL_I2C_Init+0x278>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	bf94      	ite	ls
 80020fc:	2301      	movls	r3, #1
 80020fe:	2300      	movhi	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e006      	b.n	8002112 <HAL_I2C_Init+0x92>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4a7d      	ldr	r2, [pc, #500]	@ (80022fc <HAL_I2C_Init+0x27c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	bf94      	ite	ls
 800210c:	2301      	movls	r3, #1
 800210e:	2300      	movhi	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0e7      	b.n	80022ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4a78      	ldr	r2, [pc, #480]	@ (8002300 <HAL_I2C_Init+0x280>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9b      	lsrs	r3, r3, #18
 8002124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	430a      	orrs	r2, r1
 8002138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a6a      	ldr	r2, [pc, #424]	@ (80022f4 <HAL_I2C_Init+0x274>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d802      	bhi.n	8002154 <HAL_I2C_Init+0xd4>
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	3301      	adds	r3, #1
 8002152:	e009      	b.n	8002168 <HAL_I2C_Init+0xe8>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	4a69      	ldr	r2, [pc, #420]	@ (8002304 <HAL_I2C_Init+0x284>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	3301      	adds	r3, #1
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	430b      	orrs	r3, r1
 800216e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800217a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	495c      	ldr	r1, [pc, #368]	@ (80022f4 <HAL_I2C_Init+0x274>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d819      	bhi.n	80021bc <HAL_I2C_Init+0x13c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e59      	subs	r1, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	fbb1 f3f3 	udiv	r3, r1, r3
 8002196:	1c59      	adds	r1, r3, #1
 8002198:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800219c:	400b      	ands	r3, r1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_I2C_Init+0x138>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	1e59      	subs	r1, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	e051      	b.n	800225c <HAL_I2C_Init+0x1dc>
 80021b8:	2304      	movs	r3, #4
 80021ba:	e04f      	b.n	800225c <HAL_I2C_Init+0x1dc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <HAL_I2C_Init+0x168>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1e58      	subs	r0, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6859      	ldr	r1, [r3, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	440b      	add	r3, r1
 80021d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e012      	b.n	800220e <HAL_I2C_Init+0x18e>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1e58      	subs	r0, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	0099      	lsls	r1, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fe:	3301      	adds	r3, #1
 8002200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_I2C_Init+0x196>
 8002212:	2301      	movs	r3, #1
 8002214:	e022      	b.n	800225c <HAL_I2C_Init+0x1dc>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10e      	bne.n	800223c <HAL_I2C_Init+0x1bc>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e58      	subs	r0, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	440b      	add	r3, r1
 800222c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002236:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800223a:	e00f      	b.n	800225c <HAL_I2C_Init+0x1dc>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1e58      	subs	r0, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	0099      	lsls	r1, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	6809      	ldr	r1, [r1, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800228a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6911      	ldr	r1, [r2, #16]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	430b      	orrs	r3, r1
 800229e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	000186a0 	.word	0x000186a0
 80022f8:	001e847f 	.word	0x001e847f
 80022fc:	003d08ff 	.word	0x003d08ff
 8002300:	431bde83 	.word	0x431bde83
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	461a      	mov	r2, r3
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
 8002318:	4613      	mov	r3, r2
 800231a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff fbd4 	bl	8001ac8 <HAL_GetTick>
 8002320:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	f040 80e0 	bne.w	80024f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2319      	movs	r3, #25
 8002336:	2201      	movs	r2, #1
 8002338:	4970      	ldr	r1, [pc, #448]	@ (80024fc <HAL_I2C_Master_Transmit+0x1f4>)
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f964 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	e0d3      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_I2C_Master_Transmit+0x50>
 8002354:	2302      	movs	r3, #2
 8002356:	e0cc      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d007      	beq.n	800237e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800238c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2221      	movs	r2, #33	@ 0x21
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2210      	movs	r2, #16
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	893a      	ldrh	r2, [r7, #8]
 80023ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <HAL_I2C_Master_Transmit+0x1f8>)
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023c0:	8979      	ldrh	r1, [r7, #10]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	6a3a      	ldr	r2, [r7, #32]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f89c 	bl	8002504 <I2C_MasterRequestWrite>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e08d      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023ec:	e066      	b.n	80024bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	6a39      	ldr	r1, [r7, #32]
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fa22 	bl	800283c <I2C_WaitOnTXEFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00d      	beq.n	800241a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b04      	cmp	r3, #4
 8002404:	d107      	bne.n	8002416 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06b      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b04      	cmp	r3, #4
 8002456:	d11b      	bne.n	8002490 <HAL_I2C_Master_Transmit+0x188>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	d017      	beq.n	8002490 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	6a39      	ldr	r1, [r7, #32]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fa19 	bl	80028cc <I2C_WaitOnBTFFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e01a      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d194      	bne.n	80023ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	00100002 	.word	0x00100002
 8002500:	ffff0000 	.word	0xffff0000

08002504 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	460b      	mov	r3, r1
 8002512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002518:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d006      	beq.n	800252e <I2C_MasterRequestWrite+0x2a>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d003      	beq.n	800252e <I2C_MasterRequestWrite+0x2a>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800252c:	d108      	bne.n	8002540 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e00b      	b.n	8002558 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	2b12      	cmp	r3, #18
 8002546:	d107      	bne.n	8002558 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002556:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f84f 	bl	8002608 <I2C_WaitOnFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800257e:	d103      	bne.n	8002588 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002586:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e035      	b.n	80025f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002594:	d108      	bne.n	80025a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002596:	897b      	ldrh	r3, [r7, #10]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	e01b      	b.n	80025e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025a8:	897b      	ldrh	r3, [r7, #10]
 80025aa:	11db      	asrs	r3, r3, #7
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	f003 0306 	and.w	r3, r3, #6
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	f063 030f 	orn	r3, r3, #15
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	490e      	ldr	r1, [pc, #56]	@ (8002600 <I2C_MasterRequestWrite+0xfc>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f898 	bl	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e010      	b.n	80025f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4907      	ldr	r1, [pc, #28]	@ (8002604 <I2C_MasterRequestWrite+0x100>)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f888 	bl	80026fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	00010008 	.word	0x00010008
 8002604:	00010002 	.word	0x00010002

08002608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	4613      	mov	r3, r2
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002618:	e048      	b.n	80026ac <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d044      	beq.n	80026ac <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002622:	f7ff fa51 	bl	8001ac8 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	429a      	cmp	r2, r3
 8002630:	d302      	bcc.n	8002638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d139      	bne.n	80026ac <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d10d      	bne.n	800265e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	43da      	mvns	r2, r3
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	4013      	ands	r3, r2
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	e00c      	b.n	8002678 <I2C_WaitOnFlagUntilTimeout+0x70>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	43da      	mvns	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4013      	ands	r3, r2
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	429a      	cmp	r2, r3
 800267c:	d116      	bne.n	80026ac <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e023      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	0c1b      	lsrs	r3, r3, #16
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10d      	bne.n	80026d2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	e00c      	b.n	80026ec <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	43da      	mvns	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4013      	ands	r3, r2
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d093      	beq.n	800261a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800270a:	e071      	b.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800271a:	d123      	bne.n	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800272a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002734:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	f043 0204 	orr.w	r2, r3, #4
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e067      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d041      	beq.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276c:	f7ff f9ac 	bl	8001ac8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	429a      	cmp	r2, r3
 800277a:	d302      	bcc.n	8002782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d136      	bne.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d10c      	bne.n	80027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	43da      	mvns	r2, r3
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	bf14      	ite	ne
 800279e:	2301      	movne	r3, #1
 80027a0:	2300      	moveq	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e00b      	b.n	80027be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	43da      	mvns	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4013      	ands	r3, r2
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d016      	beq.n	80027f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e021      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	0c1b      	lsrs	r3, r3, #16
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10c      	bne.n	8002814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	43da      	mvns	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	4013      	ands	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	e00b      	b.n	800282c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	43da      	mvns	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4013      	ands	r3, r2
 8002820:	b29b      	uxth	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	bf14      	ite	ne
 8002826:	2301      	movne	r3, #1
 8002828:	2300      	moveq	r3, #0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	f47f af6d 	bne.w	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002848:	e034      	b.n	80028b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 f886 	bl	800295c <I2C_IsAcknowledgeFailed>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e034      	b.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d028      	beq.n	80028b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7ff f931 	bl	8001ac8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11d      	bne.n	80028b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d016      	beq.n	80028b4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0220 	orr.w	r2, r3, #32
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e007      	b.n	80028c4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028be:	2b80      	cmp	r3, #128	@ 0x80
 80028c0:	d1c3      	bne.n	800284a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d8:	e034      	b.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f000 f83e 	bl	800295c <I2C_IsAcknowledgeFailed>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d028      	beq.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff f8e9 	bl	8001ac8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d302      	bcc.n	8002908 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d11d      	bne.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b04      	cmp	r3, #4
 8002914:	d016      	beq.n	8002944 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e007      	b.n	8002954 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b04      	cmp	r3, #4
 8002950:	d1c3      	bne.n	80028da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800296e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002972:	d11b      	bne.n	80029ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800297c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	f043 0204 	orr.w	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0cc      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b68      	ldr	r3, [pc, #416]	@ (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90c      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b65      	ldr	r3, [pc, #404]	@ (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e6:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d001      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e0b8      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a10:	4b59      	ldr	r3, [pc, #356]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	4a58      	ldr	r2, [pc, #352]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a28:	4b53      	ldr	r3, [pc, #332]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a52      	ldr	r2, [pc, #328]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a34:	4b50      	ldr	r3, [pc, #320]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	494d      	ldr	r1, [pc, #308]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d044      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5a:	4b47      	ldr	r3, [pc, #284]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d119      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e07f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e067      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b37      	ldr	r3, [pc, #220]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4934      	ldr	r1, [pc, #208]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7ff f80c 	bl	8001ac8 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7ff f808 	bl	8001ac8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e04f      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d20c      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b20      	ldr	r3, [pc, #128]	@ (8002b74 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e032      	b.n	8002b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b10:	4b19      	ldr	r3, [pc, #100]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4916      	ldr	r1, [pc, #88]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2e:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	490e      	ldr	r1, [pc, #56]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b42:	f000 f841 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	091b      	lsrs	r3, r3, #4
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	490a      	ldr	r1, [pc, #40]	@ (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	5ccb      	ldrb	r3, [r1, r3]
 8002b56:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5a:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b5e:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fe ff6c 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40023c00 	.word	0x40023c00
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	08004f28 	.word	0x08004f28
 8002b80:	20009228 	.word	0x20009228
 8002b84:	2000922c 	.word	0x2000922c

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20009228 	.word	0x20009228

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	@ (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08004f38 	.word	0x08004f38

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b0a6      	sub	sp, #152	@ 0x98
 8002bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bee:	4bc8      	ldr	r3, [pc, #800]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	f200 817e 	bhi.w	8002ef8 <HAL_RCC_GetSysClockFreq+0x330>
 8002bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8002c04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c39 	.word	0x08002c39
 8002c08:	08002ef9 	.word	0x08002ef9
 8002c0c:	08002ef9 	.word	0x08002ef9
 8002c10:	08002ef9 	.word	0x08002ef9
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08002ef9 	.word	0x08002ef9
 8002c1c:	08002ef9 	.word	0x08002ef9
 8002c20:	08002ef9 	.word	0x08002ef9
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08002ef9 	.word	0x08002ef9
 8002c2c:	08002ef9 	.word	0x08002ef9
 8002c30:	08002ef9 	.word	0x08002ef9
 8002c34:	08002db3 	.word	0x08002db3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4bb6      	ldr	r3, [pc, #728]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 8002c3e:	e15f      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4bb5      	ldr	r3, [pc, #724]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002c46:	e15b      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4bb1      	ldr	r3, [pc, #708]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c54:	4bae      	ldr	r3, [pc, #696]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d031      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4bab      	ldr	r3, [pc, #684]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c6a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c72:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c74:	2300      	movs	r3, #0
 8002c76:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c78:	4ba7      	ldr	r3, [pc, #668]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c7a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c7e:	462a      	mov	r2, r5
 8002c80:	fb03 f202 	mul.w	r2, r3, r2
 8002c84:	2300      	movs	r3, #0
 8002c86:	4621      	mov	r1, r4
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4aa2      	ldr	r2, [pc, #648]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c90:	4621      	mov	r1, r4
 8002c92:	fba1 1202 	umull	r1, r2, r1, r2
 8002c96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c98:	460a      	mov	r2, r1
 8002c9a:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002c9c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002c9e:	4413      	add	r3, r2
 8002ca0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002caa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002cac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cb0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002cb4:	f7fd fb04 	bl	80002c0 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002cc2:	e064      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b92      	ldr	r3, [pc, #584]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	2200      	movs	r2, #0
 8002ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cce:	657a      	str	r2, [r7, #84]	@ 0x54
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd8:	2300      	movs	r3, #0
 8002cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cdc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0159      	lsls	r1, r3, #5
 8002cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf2:	0150      	lsls	r0, r2, #5
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	1a51      	subs	r1, r2, r1
 8002cfc:	6139      	str	r1, [r7, #16]
 8002cfe:	4629      	mov	r1, r5
 8002d00:	eb63 0301 	sbc.w	r3, r3, r1
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d12:	4659      	mov	r1, fp
 8002d14:	018b      	lsls	r3, r1, #6
 8002d16:	4651      	mov	r1, sl
 8002d18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	018a      	lsls	r2, r1, #6
 8002d20:	4651      	mov	r1, sl
 8002d22:	ebb2 0801 	subs.w	r8, r2, r1
 8002d26:	4659      	mov	r1, fp
 8002d28:	eb63 0901 	sbc.w	r9, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d40:	4690      	mov	r8, r2
 8002d42:	4699      	mov	r9, r3
 8002d44:	4623      	mov	r3, r4
 8002d46:	eb18 0303 	adds.w	r3, r8, r3
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	462b      	mov	r3, r5
 8002d4e:	eb49 0303 	adc.w	r3, r9, r3
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d60:	4629      	mov	r1, r5
 8002d62:	028b      	lsls	r3, r1, #10
 8002d64:	4621      	mov	r1, r4
 8002d66:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d6a:	4621      	mov	r1, r4
 8002d6c:	028a      	lsls	r2, r1, #10
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d76:	2200      	movs	r2, #0
 8002d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d7c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d80:	f7fd fa9e 	bl	80002c0 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8e:	4b60      	ldr	r3, [pc, #384]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	3301      	adds	r3, #1
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8002da0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002db0:	e0a6      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db2:	4b57      	ldr	r3, [pc, #348]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbe:	4b54      	ldr	r3, [pc, #336]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d02a      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dca:	4b51      	ldr	r3, [pc, #324]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	099b      	lsrs	r3, r3, #6
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4b4e      	ldr	r3, [pc, #312]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002de0:	fb03 f201 	mul.w	r2, r3, r1
 8002de4:	2300      	movs	r3, #0
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	4a4a      	ldr	r2, [pc, #296]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x350>)
 8002dee:	fba0 1202 	umull	r1, r2, r0, r2
 8002df2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002df4:	460a      	mov	r2, r1
 8002df6:	673a      	str	r2, [r7, #112]	@ 0x70
 8002df8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002dfa:	4413      	add	r3, r2
 8002dfc:	677b      	str	r3, [r7, #116]	@ 0x74
 8002dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e02:	2200      	movs	r2, #0
 8002e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e06:	637a      	str	r2, [r7, #52]	@ 0x34
 8002e08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e0c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002e10:	f7fd fa56 	bl	80002c0 <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002e1e:	e05b      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	099b      	lsrs	r3, r3, #6
 8002e26:	2200      	movs	r2, #0
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	623b      	str	r3, [r7, #32]
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	f04f 0000 	mov.w	r0, #0
 8002e44:	f04f 0100 	mov.w	r1, #0
 8002e48:	0159      	lsls	r1, r3, #5
 8002e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e4e:	0150      	lsls	r0, r2, #5
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4641      	mov	r1, r8
 8002e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e74:	ebb2 040a 	subs.w	r4, r2, sl
 8002e78:	eb63 050b 	sbc.w	r5, r3, fp
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	00eb      	lsls	r3, r5, #3
 8002e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e8a:	00e2      	lsls	r2, r4, #3
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4643      	mov	r3, r8
 8002e92:	18e3      	adds	r3, r4, r3
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	464b      	mov	r3, r9
 8002e98:	eb45 0303 	adc.w	r3, r5, r3
 8002e9c:	607b      	str	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eaa:	4629      	mov	r1, r5
 8002eac:	028b      	lsls	r3, r1, #10
 8002eae:	4621      	mov	r1, r4
 8002eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb4:	4621      	mov	r1, r4
 8002eb6:	028a      	lsls	r2, r1, #10
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	61fa      	str	r2, [r7, #28]
 8002ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eca:	f7fd f9f9 	bl	80002c0 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_RCC_GetSysClockFreq+0x348>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0f1b      	lsrs	r3, r3, #28
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8002ee6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002eea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002ef6:	e003      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3798      	adds	r7, #152	@ 0x98
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	017d7840 	.word	0x017d7840

08002f1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e28d      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8083 	beq.w	8003042 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f3c:	4b94      	ldr	r3, [pc, #592]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d019      	beq.n	8002f7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f48:	4b91      	ldr	r3, [pc, #580]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f54:	4b8e      	ldr	r3, [pc, #568]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f62:	4b8b      	ldr	r3, [pc, #556]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6e:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	4b84      	ldr	r3, [pc, #528]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d05b      	beq.n	8003040 <HAL_RCC_OscConfig+0x124>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d157      	bne.n	8003040 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e25a      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f9c:	d106      	bne.n	8002fac <HAL_RCC_OscConfig+0x90>
 8002f9e:	4b7c      	ldr	r3, [pc, #496]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7b      	ldr	r2, [pc, #492]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	e01d      	b.n	8002fe8 <HAL_RCC_OscConfig+0xcc>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0xb4>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b73      	ldr	r3, [pc, #460]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a72      	ldr	r2, [pc, #456]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e00b      	b.n	8002fe8 <HAL_RCC_OscConfig+0xcc>
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6b      	ldr	r2, [pc, #428]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8002fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d013      	beq.n	8003018 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fe fd6a 	bl	8001ac8 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe fd66 	bl	8001ac8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	@ 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e21f      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300a:	4b61      	ldr	r3, [pc, #388]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xdc>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe fd56 	bl	8001ac8 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003020:	f7fe fd52 	bl	8001ac8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b64      	cmp	r3, #100	@ 0x64
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e20b      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003032:	4b57      	ldr	r3, [pc, #348]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x104>
 800303e:	e000      	b.n	8003042 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d06f      	beq.n	800312e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800304e:	4b50      	ldr	r3, [pc, #320]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b00      	cmp	r3, #0
 8003058:	d017      	beq.n	800308a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800305a:	4b4d      	ldr	r3, [pc, #308]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003062:	2b08      	cmp	r3, #8
 8003064:	d105      	bne.n	8003072 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003066:	4b4a      	ldr	r3, [pc, #296]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b47      	ldr	r3, [pc, #284]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800307a:	2b0c      	cmp	r3, #12
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b44      	ldr	r3, [pc, #272]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b41      	ldr	r3, [pc, #260]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x186>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1d3      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4937      	ldr	r1, [pc, #220]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_RCC_OscConfig+0x278>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fcff 	bl	8001ac8 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fcfb 	bl	8001ac8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1b4      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b28      	ldr	r3, [pc, #160]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4925      	ldr	r1, [pc, #148]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b24      	ldr	r3, [pc, #144]	@ (8003194 <HAL_RCC_OscConfig+0x278>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fcde 	bl	8001ac8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe fcda 	bl	8001ac8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e193      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d036      	beq.n	80031a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b15      	ldr	r3, [pc, #84]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fcbe 	bl	8001ac8 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe fcba 	bl	8001ac8 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e173      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <HAL_RCC_OscConfig+0x274>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x234>
 800316e:	e01b      	b.n	80031a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b09      	ldr	r3, [pc, #36]	@ (8003198 <HAL_RCC_OscConfig+0x27c>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7fe fca7 	bl	8001ac8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	e00e      	b.n	800319c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe fca3 	bl	8001ac8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d907      	bls.n	800319c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e15c      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
 8003190:	40023800 	.word	0x40023800
 8003194:	42470000 	.word	0x42470000
 8003198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b8a      	ldr	r3, [pc, #552]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800319e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ea      	bne.n	800317e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8097 	beq.w	80032e4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b83      	ldr	r3, [pc, #524]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	4b7f      	ldr	r3, [pc, #508]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	4a7e      	ldr	r2, [pc, #504]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d6:	4b7c      	ldr	r3, [pc, #496]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b79      	ldr	r3, [pc, #484]	@ (80033cc <HAL_RCC_OscConfig+0x4b0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f2:	4b76      	ldr	r3, [pc, #472]	@ (80033cc <HAL_RCC_OscConfig+0x4b0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a75      	ldr	r2, [pc, #468]	@ (80033cc <HAL_RCC_OscConfig+0x4b0>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7fe fc63 	bl	8001ac8 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fe fc5f 	bl	8001ac8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e118      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b6c      	ldr	r3, [pc, #432]	@ (80033cc <HAL_RCC_OscConfig+0x4b0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x31e>
 800322c:	4b66      	ldr	r3, [pc, #408]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003230:	4a65      	ldr	r2, [pc, #404]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6713      	str	r3, [r2, #112]	@ 0x70
 8003238:	e01c      	b.n	8003274 <HAL_RCC_OscConfig+0x358>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x340>
 8003242:	4b61      	ldr	r3, [pc, #388]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	4a60      	ldr	r2, [pc, #384]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6713      	str	r3, [r2, #112]	@ 0x70
 800324e:	4b5e      	ldr	r3, [pc, #376]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	4a5d      	ldr	r2, [pc, #372]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	@ 0x70
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0x358>
 800325c:	4b5a      	ldr	r3, [pc, #360]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003260:	4a59      	ldr	r2, [pc, #356]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	@ 0x70
 8003268:	4b57      	ldr	r3, [pc, #348]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a56      	ldr	r2, [pc, #344]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800326e:	f023 0304 	bic.w	r3, r3, #4
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe fc24 	bl	8001ac8 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe fc20 	bl	8001ac8 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0d7      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	4b4b      	ldr	r3, [pc, #300]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ee      	beq.n	8003284 <HAL_RCC_OscConfig+0x368>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fc0e 	bl	8001ac8 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe fc0a 	bl	8001ac8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0c1      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	4b40      	ldr	r3, [pc, #256]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ee      	bne.n	80032b0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	4a3a      	ldr	r2, [pc, #232]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80ad 	beq.w	8003448 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ee:	4b36      	ldr	r3, [pc, #216]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d060      	beq.n	80033bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d145      	bne.n	800338e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b33      	ldr	r3, [pc, #204]	@ (80033d0 <HAL_RCC_OscConfig+0x4b4>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fbde 	bl	8001ac8 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fbda 	bl	8001ac8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e093      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b29      	ldr	r3, [pc, #164]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	491b      	ldr	r1, [pc, #108]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b1b      	ldr	r3, [pc, #108]	@ (80033d0 <HAL_RCC_OscConfig+0x4b4>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe fbaf 	bl	8001ac8 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fbab 	bl	8001ac8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e064      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003380:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x452>
 800338c:	e05c      	b.n	8003448 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b10      	ldr	r3, [pc, #64]	@ (80033d0 <HAL_RCC_OscConfig+0x4b4>)
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fb98 	bl	8001ac8 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fb94 	bl	8001ac8 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e04d      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x480>
 80033ba:	e045      	b.n	8003448 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e040      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000
 80033d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003454 <HAL_RCC_OscConfig+0x538>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d030      	beq.n	8003444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d129      	bne.n	8003444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d122      	bne.n	8003444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800340a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800340c:	4293      	cmp	r3, r2
 800340e:	d119      	bne.n	8003444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	3b01      	subs	r3, #1
 800341e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003420:	429a      	cmp	r2, r3
 8003422:	d10f      	bne.n	8003444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e07b      	b.n	8003562 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	2b00      	cmp	r3, #0
 8003470:	d108      	bne.n	8003484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800347a:	d009      	beq.n	8003490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	61da      	str	r2, [r3, #28]
 8003482:	e005      	b.n	8003490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe f9bc 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0104 	and.w	r1, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	f003 0210 	and.w	r2, r3, #16
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003550:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <siprintf>:
 800356c:	b40e      	push	{r1, r2, r3}
 800356e:	b500      	push	{lr}
 8003570:	b09c      	sub	sp, #112	@ 0x70
 8003572:	ab1d      	add	r3, sp, #116	@ 0x74
 8003574:	9002      	str	r0, [sp, #8]
 8003576:	9006      	str	r0, [sp, #24]
 8003578:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800357c:	4809      	ldr	r0, [pc, #36]	@ (80035a4 <siprintf+0x38>)
 800357e:	9107      	str	r1, [sp, #28]
 8003580:	9104      	str	r1, [sp, #16]
 8003582:	4909      	ldr	r1, [pc, #36]	@ (80035a8 <siprintf+0x3c>)
 8003584:	f853 2b04 	ldr.w	r2, [r3], #4
 8003588:	9105      	str	r1, [sp, #20]
 800358a:	6800      	ldr	r0, [r0, #0]
 800358c:	9301      	str	r3, [sp, #4]
 800358e:	a902      	add	r1, sp, #8
 8003590:	f000 f994 	bl	80038bc <_svfiprintf_r>
 8003594:	9b02      	ldr	r3, [sp, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	b01c      	add	sp, #112	@ 0x70
 800359c:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a0:	b003      	add	sp, #12
 80035a2:	4770      	bx	lr
 80035a4:	20009234 	.word	0x20009234
 80035a8:	ffff0208 	.word	0xffff0208

080035ac <memset>:
 80035ac:	4402      	add	r2, r0
 80035ae:	4603      	mov	r3, r0
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d100      	bne.n	80035b6 <memset+0xa>
 80035b4:	4770      	bx	lr
 80035b6:	f803 1b01 	strb.w	r1, [r3], #1
 80035ba:	e7f9      	b.n	80035b0 <memset+0x4>

080035bc <__errno>:
 80035bc:	4b01      	ldr	r3, [pc, #4]	@ (80035c4 <__errno+0x8>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20009234 	.word	0x20009234

080035c8 <__libc_init_array>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003600 <__libc_init_array+0x38>)
 80035cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003604 <__libc_init_array+0x3c>)
 80035ce:	1b64      	subs	r4, r4, r5
 80035d0:	10a4      	asrs	r4, r4, #2
 80035d2:	2600      	movs	r6, #0
 80035d4:	42a6      	cmp	r6, r4
 80035d6:	d109      	bne.n	80035ec <__libc_init_array+0x24>
 80035d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003608 <__libc_init_array+0x40>)
 80035da:	4c0c      	ldr	r4, [pc, #48]	@ (800360c <__libc_init_array+0x44>)
 80035dc:	f000 fc66 	bl	8003eac <_init>
 80035e0:	1b64      	subs	r4, r4, r5
 80035e2:	10a4      	asrs	r4, r4, #2
 80035e4:	2600      	movs	r6, #0
 80035e6:	42a6      	cmp	r6, r4
 80035e8:	d105      	bne.n	80035f6 <__libc_init_array+0x2e>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f0:	4798      	blx	r3
 80035f2:	3601      	adds	r6, #1
 80035f4:	e7ee      	b.n	80035d4 <__libc_init_array+0xc>
 80035f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fa:	4798      	blx	r3
 80035fc:	3601      	adds	r6, #1
 80035fe:	e7f2      	b.n	80035e6 <__libc_init_array+0x1e>
 8003600:	08004f7c 	.word	0x08004f7c
 8003604:	08004f7c 	.word	0x08004f7c
 8003608:	08004f7c 	.word	0x08004f7c
 800360c:	08004f80 	.word	0x08004f80

08003610 <__retarget_lock_acquire_recursive>:
 8003610:	4770      	bx	lr

08003612 <__retarget_lock_release_recursive>:
 8003612:	4770      	bx	lr

08003614 <_free_r>:
 8003614:	b538      	push	{r3, r4, r5, lr}
 8003616:	4605      	mov	r5, r0
 8003618:	2900      	cmp	r1, #0
 800361a:	d041      	beq.n	80036a0 <_free_r+0x8c>
 800361c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003620:	1f0c      	subs	r4, r1, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	bfb8      	it	lt
 8003626:	18e4      	addlt	r4, r4, r3
 8003628:	f000 f8e0 	bl	80037ec <__malloc_lock>
 800362c:	4a1d      	ldr	r2, [pc, #116]	@ (80036a4 <_free_r+0x90>)
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	b933      	cbnz	r3, 8003640 <_free_r+0x2c>
 8003632:	6063      	str	r3, [r4, #4]
 8003634:	6014      	str	r4, [r2, #0]
 8003636:	4628      	mov	r0, r5
 8003638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800363c:	f000 b8dc 	b.w	80037f8 <__malloc_unlock>
 8003640:	42a3      	cmp	r3, r4
 8003642:	d908      	bls.n	8003656 <_free_r+0x42>
 8003644:	6820      	ldr	r0, [r4, #0]
 8003646:	1821      	adds	r1, r4, r0
 8003648:	428b      	cmp	r3, r1
 800364a:	bf01      	itttt	eq
 800364c:	6819      	ldreq	r1, [r3, #0]
 800364e:	685b      	ldreq	r3, [r3, #4]
 8003650:	1809      	addeq	r1, r1, r0
 8003652:	6021      	streq	r1, [r4, #0]
 8003654:	e7ed      	b.n	8003632 <_free_r+0x1e>
 8003656:	461a      	mov	r2, r3
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b10b      	cbz	r3, 8003660 <_free_r+0x4c>
 800365c:	42a3      	cmp	r3, r4
 800365e:	d9fa      	bls.n	8003656 <_free_r+0x42>
 8003660:	6811      	ldr	r1, [r2, #0]
 8003662:	1850      	adds	r0, r2, r1
 8003664:	42a0      	cmp	r0, r4
 8003666:	d10b      	bne.n	8003680 <_free_r+0x6c>
 8003668:	6820      	ldr	r0, [r4, #0]
 800366a:	4401      	add	r1, r0
 800366c:	1850      	adds	r0, r2, r1
 800366e:	4283      	cmp	r3, r0
 8003670:	6011      	str	r1, [r2, #0]
 8003672:	d1e0      	bne.n	8003636 <_free_r+0x22>
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	6053      	str	r3, [r2, #4]
 800367a:	4408      	add	r0, r1
 800367c:	6010      	str	r0, [r2, #0]
 800367e:	e7da      	b.n	8003636 <_free_r+0x22>
 8003680:	d902      	bls.n	8003688 <_free_r+0x74>
 8003682:	230c      	movs	r3, #12
 8003684:	602b      	str	r3, [r5, #0]
 8003686:	e7d6      	b.n	8003636 <_free_r+0x22>
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	1821      	adds	r1, r4, r0
 800368c:	428b      	cmp	r3, r1
 800368e:	bf04      	itt	eq
 8003690:	6819      	ldreq	r1, [r3, #0]
 8003692:	685b      	ldreq	r3, [r3, #4]
 8003694:	6063      	str	r3, [r4, #4]
 8003696:	bf04      	itt	eq
 8003698:	1809      	addeq	r1, r1, r0
 800369a:	6021      	streq	r1, [r4, #0]
 800369c:	6054      	str	r4, [r2, #4]
 800369e:	e7ca      	b.n	8003636 <_free_r+0x22>
 80036a0:	bd38      	pop	{r3, r4, r5, pc}
 80036a2:	bf00      	nop
 80036a4:	2000949c 	.word	0x2000949c

080036a8 <sbrk_aligned>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4e0f      	ldr	r6, [pc, #60]	@ (80036e8 <sbrk_aligned+0x40>)
 80036ac:	460c      	mov	r4, r1
 80036ae:	6831      	ldr	r1, [r6, #0]
 80036b0:	4605      	mov	r5, r0
 80036b2:	b911      	cbnz	r1, 80036ba <sbrk_aligned+0x12>
 80036b4:	f000 fba6 	bl	8003e04 <_sbrk_r>
 80036b8:	6030      	str	r0, [r6, #0]
 80036ba:	4621      	mov	r1, r4
 80036bc:	4628      	mov	r0, r5
 80036be:	f000 fba1 	bl	8003e04 <_sbrk_r>
 80036c2:	1c43      	adds	r3, r0, #1
 80036c4:	d103      	bne.n	80036ce <sbrk_aligned+0x26>
 80036c6:	f04f 34ff 	mov.w	r4, #4294967295
 80036ca:	4620      	mov	r0, r4
 80036cc:	bd70      	pop	{r4, r5, r6, pc}
 80036ce:	1cc4      	adds	r4, r0, #3
 80036d0:	f024 0403 	bic.w	r4, r4, #3
 80036d4:	42a0      	cmp	r0, r4
 80036d6:	d0f8      	beq.n	80036ca <sbrk_aligned+0x22>
 80036d8:	1a21      	subs	r1, r4, r0
 80036da:	4628      	mov	r0, r5
 80036dc:	f000 fb92 	bl	8003e04 <_sbrk_r>
 80036e0:	3001      	adds	r0, #1
 80036e2:	d1f2      	bne.n	80036ca <sbrk_aligned+0x22>
 80036e4:	e7ef      	b.n	80036c6 <sbrk_aligned+0x1e>
 80036e6:	bf00      	nop
 80036e8:	20009498 	.word	0x20009498

080036ec <_malloc_r>:
 80036ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f0:	1ccd      	adds	r5, r1, #3
 80036f2:	f025 0503 	bic.w	r5, r5, #3
 80036f6:	3508      	adds	r5, #8
 80036f8:	2d0c      	cmp	r5, #12
 80036fa:	bf38      	it	cc
 80036fc:	250c      	movcc	r5, #12
 80036fe:	2d00      	cmp	r5, #0
 8003700:	4606      	mov	r6, r0
 8003702:	db01      	blt.n	8003708 <_malloc_r+0x1c>
 8003704:	42a9      	cmp	r1, r5
 8003706:	d904      	bls.n	8003712 <_malloc_r+0x26>
 8003708:	230c      	movs	r3, #12
 800370a:	6033      	str	r3, [r6, #0]
 800370c:	2000      	movs	r0, #0
 800370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037e8 <_malloc_r+0xfc>
 8003716:	f000 f869 	bl	80037ec <__malloc_lock>
 800371a:	f8d8 3000 	ldr.w	r3, [r8]
 800371e:	461c      	mov	r4, r3
 8003720:	bb44      	cbnz	r4, 8003774 <_malloc_r+0x88>
 8003722:	4629      	mov	r1, r5
 8003724:	4630      	mov	r0, r6
 8003726:	f7ff ffbf 	bl	80036a8 <sbrk_aligned>
 800372a:	1c43      	adds	r3, r0, #1
 800372c:	4604      	mov	r4, r0
 800372e:	d158      	bne.n	80037e2 <_malloc_r+0xf6>
 8003730:	f8d8 4000 	ldr.w	r4, [r8]
 8003734:	4627      	mov	r7, r4
 8003736:	2f00      	cmp	r7, #0
 8003738:	d143      	bne.n	80037c2 <_malloc_r+0xd6>
 800373a:	2c00      	cmp	r4, #0
 800373c:	d04b      	beq.n	80037d6 <_malloc_r+0xea>
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	4639      	mov	r1, r7
 8003742:	4630      	mov	r0, r6
 8003744:	eb04 0903 	add.w	r9, r4, r3
 8003748:	f000 fb5c 	bl	8003e04 <_sbrk_r>
 800374c:	4581      	cmp	r9, r0
 800374e:	d142      	bne.n	80037d6 <_malloc_r+0xea>
 8003750:	6821      	ldr	r1, [r4, #0]
 8003752:	1a6d      	subs	r5, r5, r1
 8003754:	4629      	mov	r1, r5
 8003756:	4630      	mov	r0, r6
 8003758:	f7ff ffa6 	bl	80036a8 <sbrk_aligned>
 800375c:	3001      	adds	r0, #1
 800375e:	d03a      	beq.n	80037d6 <_malloc_r+0xea>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	442b      	add	r3, r5
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	f8d8 3000 	ldr.w	r3, [r8]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	bb62      	cbnz	r2, 80037c8 <_malloc_r+0xdc>
 800376e:	f8c8 7000 	str.w	r7, [r8]
 8003772:	e00f      	b.n	8003794 <_malloc_r+0xa8>
 8003774:	6822      	ldr	r2, [r4, #0]
 8003776:	1b52      	subs	r2, r2, r5
 8003778:	d420      	bmi.n	80037bc <_malloc_r+0xd0>
 800377a:	2a0b      	cmp	r2, #11
 800377c:	d917      	bls.n	80037ae <_malloc_r+0xc2>
 800377e:	1961      	adds	r1, r4, r5
 8003780:	42a3      	cmp	r3, r4
 8003782:	6025      	str	r5, [r4, #0]
 8003784:	bf18      	it	ne
 8003786:	6059      	strne	r1, [r3, #4]
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	bf08      	it	eq
 800378c:	f8c8 1000 	streq.w	r1, [r8]
 8003790:	5162      	str	r2, [r4, r5]
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	4630      	mov	r0, r6
 8003796:	f000 f82f 	bl	80037f8 <__malloc_unlock>
 800379a:	f104 000b 	add.w	r0, r4, #11
 800379e:	1d23      	adds	r3, r4, #4
 80037a0:	f020 0007 	bic.w	r0, r0, #7
 80037a4:	1ac2      	subs	r2, r0, r3
 80037a6:	bf1c      	itt	ne
 80037a8:	1a1b      	subne	r3, r3, r0
 80037aa:	50a3      	strne	r3, [r4, r2]
 80037ac:	e7af      	b.n	800370e <_malloc_r+0x22>
 80037ae:	6862      	ldr	r2, [r4, #4]
 80037b0:	42a3      	cmp	r3, r4
 80037b2:	bf0c      	ite	eq
 80037b4:	f8c8 2000 	streq.w	r2, [r8]
 80037b8:	605a      	strne	r2, [r3, #4]
 80037ba:	e7eb      	b.n	8003794 <_malloc_r+0xa8>
 80037bc:	4623      	mov	r3, r4
 80037be:	6864      	ldr	r4, [r4, #4]
 80037c0:	e7ae      	b.n	8003720 <_malloc_r+0x34>
 80037c2:	463c      	mov	r4, r7
 80037c4:	687f      	ldr	r7, [r7, #4]
 80037c6:	e7b6      	b.n	8003736 <_malloc_r+0x4a>
 80037c8:	461a      	mov	r2, r3
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	42a3      	cmp	r3, r4
 80037ce:	d1fb      	bne.n	80037c8 <_malloc_r+0xdc>
 80037d0:	2300      	movs	r3, #0
 80037d2:	6053      	str	r3, [r2, #4]
 80037d4:	e7de      	b.n	8003794 <_malloc_r+0xa8>
 80037d6:	230c      	movs	r3, #12
 80037d8:	6033      	str	r3, [r6, #0]
 80037da:	4630      	mov	r0, r6
 80037dc:	f000 f80c 	bl	80037f8 <__malloc_unlock>
 80037e0:	e794      	b.n	800370c <_malloc_r+0x20>
 80037e2:	6005      	str	r5, [r0, #0]
 80037e4:	e7d6      	b.n	8003794 <_malloc_r+0xa8>
 80037e6:	bf00      	nop
 80037e8:	2000949c 	.word	0x2000949c

080037ec <__malloc_lock>:
 80037ec:	4801      	ldr	r0, [pc, #4]	@ (80037f4 <__malloc_lock+0x8>)
 80037ee:	f7ff bf0f 	b.w	8003610 <__retarget_lock_acquire_recursive>
 80037f2:	bf00      	nop
 80037f4:	20009494 	.word	0x20009494

080037f8 <__malloc_unlock>:
 80037f8:	4801      	ldr	r0, [pc, #4]	@ (8003800 <__malloc_unlock+0x8>)
 80037fa:	f7ff bf0a 	b.w	8003612 <__retarget_lock_release_recursive>
 80037fe:	bf00      	nop
 8003800:	20009494 	.word	0x20009494

08003804 <__ssputs_r>:
 8003804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003808:	688e      	ldr	r6, [r1, #8]
 800380a:	461f      	mov	r7, r3
 800380c:	42be      	cmp	r6, r7
 800380e:	680b      	ldr	r3, [r1, #0]
 8003810:	4682      	mov	sl, r0
 8003812:	460c      	mov	r4, r1
 8003814:	4690      	mov	r8, r2
 8003816:	d82d      	bhi.n	8003874 <__ssputs_r+0x70>
 8003818:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800381c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003820:	d026      	beq.n	8003870 <__ssputs_r+0x6c>
 8003822:	6965      	ldr	r5, [r4, #20]
 8003824:	6909      	ldr	r1, [r1, #16]
 8003826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800382a:	eba3 0901 	sub.w	r9, r3, r1
 800382e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003832:	1c7b      	adds	r3, r7, #1
 8003834:	444b      	add	r3, r9
 8003836:	106d      	asrs	r5, r5, #1
 8003838:	429d      	cmp	r5, r3
 800383a:	bf38      	it	cc
 800383c:	461d      	movcc	r5, r3
 800383e:	0553      	lsls	r3, r2, #21
 8003840:	d527      	bpl.n	8003892 <__ssputs_r+0x8e>
 8003842:	4629      	mov	r1, r5
 8003844:	f7ff ff52 	bl	80036ec <_malloc_r>
 8003848:	4606      	mov	r6, r0
 800384a:	b360      	cbz	r0, 80038a6 <__ssputs_r+0xa2>
 800384c:	6921      	ldr	r1, [r4, #16]
 800384e:	464a      	mov	r2, r9
 8003850:	f000 fae8 	bl	8003e24 <memcpy>
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800385a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800385e:	81a3      	strh	r3, [r4, #12]
 8003860:	6126      	str	r6, [r4, #16]
 8003862:	6165      	str	r5, [r4, #20]
 8003864:	444e      	add	r6, r9
 8003866:	eba5 0509 	sub.w	r5, r5, r9
 800386a:	6026      	str	r6, [r4, #0]
 800386c:	60a5      	str	r5, [r4, #8]
 800386e:	463e      	mov	r6, r7
 8003870:	42be      	cmp	r6, r7
 8003872:	d900      	bls.n	8003876 <__ssputs_r+0x72>
 8003874:	463e      	mov	r6, r7
 8003876:	6820      	ldr	r0, [r4, #0]
 8003878:	4632      	mov	r2, r6
 800387a:	4641      	mov	r1, r8
 800387c:	f000 faa8 	bl	8003dd0 <memmove>
 8003880:	68a3      	ldr	r3, [r4, #8]
 8003882:	1b9b      	subs	r3, r3, r6
 8003884:	60a3      	str	r3, [r4, #8]
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	4433      	add	r3, r6
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	2000      	movs	r0, #0
 800388e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003892:	462a      	mov	r2, r5
 8003894:	f000 fad4 	bl	8003e40 <_realloc_r>
 8003898:	4606      	mov	r6, r0
 800389a:	2800      	cmp	r0, #0
 800389c:	d1e0      	bne.n	8003860 <__ssputs_r+0x5c>
 800389e:	6921      	ldr	r1, [r4, #16]
 80038a0:	4650      	mov	r0, sl
 80038a2:	f7ff feb7 	bl	8003614 <_free_r>
 80038a6:	230c      	movs	r3, #12
 80038a8:	f8ca 3000 	str.w	r3, [sl]
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	e7e9      	b.n	800388e <__ssputs_r+0x8a>
	...

080038bc <_svfiprintf_r>:
 80038bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c0:	4698      	mov	r8, r3
 80038c2:	898b      	ldrh	r3, [r1, #12]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	b09d      	sub	sp, #116	@ 0x74
 80038c8:	4607      	mov	r7, r0
 80038ca:	460d      	mov	r5, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	d510      	bpl.n	80038f2 <_svfiprintf_r+0x36>
 80038d0:	690b      	ldr	r3, [r1, #16]
 80038d2:	b973      	cbnz	r3, 80038f2 <_svfiprintf_r+0x36>
 80038d4:	2140      	movs	r1, #64	@ 0x40
 80038d6:	f7ff ff09 	bl	80036ec <_malloc_r>
 80038da:	6028      	str	r0, [r5, #0]
 80038dc:	6128      	str	r0, [r5, #16]
 80038de:	b930      	cbnz	r0, 80038ee <_svfiprintf_r+0x32>
 80038e0:	230c      	movs	r3, #12
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	b01d      	add	sp, #116	@ 0x74
 80038ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ee:	2340      	movs	r3, #64	@ 0x40
 80038f0:	616b      	str	r3, [r5, #20]
 80038f2:	2300      	movs	r3, #0
 80038f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80038f6:	2320      	movs	r3, #32
 80038f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003900:	2330      	movs	r3, #48	@ 0x30
 8003902:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003aa0 <_svfiprintf_r+0x1e4>
 8003906:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800390a:	f04f 0901 	mov.w	r9, #1
 800390e:	4623      	mov	r3, r4
 8003910:	469a      	mov	sl, r3
 8003912:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003916:	b10a      	cbz	r2, 800391c <_svfiprintf_r+0x60>
 8003918:	2a25      	cmp	r2, #37	@ 0x25
 800391a:	d1f9      	bne.n	8003910 <_svfiprintf_r+0x54>
 800391c:	ebba 0b04 	subs.w	fp, sl, r4
 8003920:	d00b      	beq.n	800393a <_svfiprintf_r+0x7e>
 8003922:	465b      	mov	r3, fp
 8003924:	4622      	mov	r2, r4
 8003926:	4629      	mov	r1, r5
 8003928:	4638      	mov	r0, r7
 800392a:	f7ff ff6b 	bl	8003804 <__ssputs_r>
 800392e:	3001      	adds	r0, #1
 8003930:	f000 80a7 	beq.w	8003a82 <_svfiprintf_r+0x1c6>
 8003934:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003936:	445a      	add	r2, fp
 8003938:	9209      	str	r2, [sp, #36]	@ 0x24
 800393a:	f89a 3000 	ldrb.w	r3, [sl]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 809f 	beq.w	8003a82 <_svfiprintf_r+0x1c6>
 8003944:	2300      	movs	r3, #0
 8003946:	f04f 32ff 	mov.w	r2, #4294967295
 800394a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800394e:	f10a 0a01 	add.w	sl, sl, #1
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	9307      	str	r3, [sp, #28]
 8003956:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800395a:	931a      	str	r3, [sp, #104]	@ 0x68
 800395c:	4654      	mov	r4, sl
 800395e:	2205      	movs	r2, #5
 8003960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003964:	484e      	ldr	r0, [pc, #312]	@ (8003aa0 <_svfiprintf_r+0x1e4>)
 8003966:	f7fc fc5b 	bl	8000220 <memchr>
 800396a:	9a04      	ldr	r2, [sp, #16]
 800396c:	b9d8      	cbnz	r0, 80039a6 <_svfiprintf_r+0xea>
 800396e:	06d0      	lsls	r0, r2, #27
 8003970:	bf44      	itt	mi
 8003972:	2320      	movmi	r3, #32
 8003974:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003978:	0711      	lsls	r1, r2, #28
 800397a:	bf44      	itt	mi
 800397c:	232b      	movmi	r3, #43	@ 0x2b
 800397e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003982:	f89a 3000 	ldrb.w	r3, [sl]
 8003986:	2b2a      	cmp	r3, #42	@ 0x2a
 8003988:	d015      	beq.n	80039b6 <_svfiprintf_r+0xfa>
 800398a:	9a07      	ldr	r2, [sp, #28]
 800398c:	4654      	mov	r4, sl
 800398e:	2000      	movs	r0, #0
 8003990:	f04f 0c0a 	mov.w	ip, #10
 8003994:	4621      	mov	r1, r4
 8003996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800399a:	3b30      	subs	r3, #48	@ 0x30
 800399c:	2b09      	cmp	r3, #9
 800399e:	d94b      	bls.n	8003a38 <_svfiprintf_r+0x17c>
 80039a0:	b1b0      	cbz	r0, 80039d0 <_svfiprintf_r+0x114>
 80039a2:	9207      	str	r2, [sp, #28]
 80039a4:	e014      	b.n	80039d0 <_svfiprintf_r+0x114>
 80039a6:	eba0 0308 	sub.w	r3, r0, r8
 80039aa:	fa09 f303 	lsl.w	r3, r9, r3
 80039ae:	4313      	orrs	r3, r2
 80039b0:	9304      	str	r3, [sp, #16]
 80039b2:	46a2      	mov	sl, r4
 80039b4:	e7d2      	b.n	800395c <_svfiprintf_r+0xa0>
 80039b6:	9b03      	ldr	r3, [sp, #12]
 80039b8:	1d19      	adds	r1, r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	9103      	str	r1, [sp, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bfbb      	ittet	lt
 80039c2:	425b      	neglt	r3, r3
 80039c4:	f042 0202 	orrlt.w	r2, r2, #2
 80039c8:	9307      	strge	r3, [sp, #28]
 80039ca:	9307      	strlt	r3, [sp, #28]
 80039cc:	bfb8      	it	lt
 80039ce:	9204      	strlt	r2, [sp, #16]
 80039d0:	7823      	ldrb	r3, [r4, #0]
 80039d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80039d4:	d10a      	bne.n	80039ec <_svfiprintf_r+0x130>
 80039d6:	7863      	ldrb	r3, [r4, #1]
 80039d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80039da:	d132      	bne.n	8003a42 <_svfiprintf_r+0x186>
 80039dc:	9b03      	ldr	r3, [sp, #12]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	9203      	str	r2, [sp, #12]
 80039e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039e8:	3402      	adds	r4, #2
 80039ea:	9305      	str	r3, [sp, #20]
 80039ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ab0 <_svfiprintf_r+0x1f4>
 80039f0:	7821      	ldrb	r1, [r4, #0]
 80039f2:	2203      	movs	r2, #3
 80039f4:	4650      	mov	r0, sl
 80039f6:	f7fc fc13 	bl	8000220 <memchr>
 80039fa:	b138      	cbz	r0, 8003a0c <_svfiprintf_r+0x150>
 80039fc:	9b04      	ldr	r3, [sp, #16]
 80039fe:	eba0 000a 	sub.w	r0, r0, sl
 8003a02:	2240      	movs	r2, #64	@ 0x40
 8003a04:	4082      	lsls	r2, r0
 8003a06:	4313      	orrs	r3, r2
 8003a08:	3401      	adds	r4, #1
 8003a0a:	9304      	str	r3, [sp, #16]
 8003a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a10:	4824      	ldr	r0, [pc, #144]	@ (8003aa4 <_svfiprintf_r+0x1e8>)
 8003a12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a16:	2206      	movs	r2, #6
 8003a18:	f7fc fc02 	bl	8000220 <memchr>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d036      	beq.n	8003a8e <_svfiprintf_r+0x1d2>
 8003a20:	4b21      	ldr	r3, [pc, #132]	@ (8003aa8 <_svfiprintf_r+0x1ec>)
 8003a22:	bb1b      	cbnz	r3, 8003a6c <_svfiprintf_r+0x1b0>
 8003a24:	9b03      	ldr	r3, [sp, #12]
 8003a26:	3307      	adds	r3, #7
 8003a28:	f023 0307 	bic.w	r3, r3, #7
 8003a2c:	3308      	adds	r3, #8
 8003a2e:	9303      	str	r3, [sp, #12]
 8003a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a32:	4433      	add	r3, r6
 8003a34:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a36:	e76a      	b.n	800390e <_svfiprintf_r+0x52>
 8003a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	e7a8      	b.n	8003994 <_svfiprintf_r+0xd8>
 8003a42:	2300      	movs	r3, #0
 8003a44:	3401      	adds	r4, #1
 8003a46:	9305      	str	r3, [sp, #20]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f04f 0c0a 	mov.w	ip, #10
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a54:	3a30      	subs	r2, #48	@ 0x30
 8003a56:	2a09      	cmp	r2, #9
 8003a58:	d903      	bls.n	8003a62 <_svfiprintf_r+0x1a6>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0c6      	beq.n	80039ec <_svfiprintf_r+0x130>
 8003a5e:	9105      	str	r1, [sp, #20]
 8003a60:	e7c4      	b.n	80039ec <_svfiprintf_r+0x130>
 8003a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a66:	4604      	mov	r4, r0
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e7f0      	b.n	8003a4e <_svfiprintf_r+0x192>
 8003a6c:	ab03      	add	r3, sp, #12
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	462a      	mov	r2, r5
 8003a72:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <_svfiprintf_r+0x1f0>)
 8003a74:	a904      	add	r1, sp, #16
 8003a76:	4638      	mov	r0, r7
 8003a78:	f3af 8000 	nop.w
 8003a7c:	1c42      	adds	r2, r0, #1
 8003a7e:	4606      	mov	r6, r0
 8003a80:	d1d6      	bne.n	8003a30 <_svfiprintf_r+0x174>
 8003a82:	89ab      	ldrh	r3, [r5, #12]
 8003a84:	065b      	lsls	r3, r3, #25
 8003a86:	f53f af2d 	bmi.w	80038e4 <_svfiprintf_r+0x28>
 8003a8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a8c:	e72c      	b.n	80038e8 <_svfiprintf_r+0x2c>
 8003a8e:	ab03      	add	r3, sp, #12
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	462a      	mov	r2, r5
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <_svfiprintf_r+0x1f0>)
 8003a96:	a904      	add	r1, sp, #16
 8003a98:	4638      	mov	r0, r7
 8003a9a:	f000 f879 	bl	8003b90 <_printf_i>
 8003a9e:	e7ed      	b.n	8003a7c <_svfiprintf_r+0x1c0>
 8003aa0:	08004f40 	.word	0x08004f40
 8003aa4:	08004f4a 	.word	0x08004f4a
 8003aa8:	00000000 	.word	0x00000000
 8003aac:	08003805 	.word	0x08003805
 8003ab0:	08004f46 	.word	0x08004f46

08003ab4 <_printf_common>:
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	4616      	mov	r6, r2
 8003aba:	4698      	mov	r8, r3
 8003abc:	688a      	ldr	r2, [r1, #8]
 8003abe:	690b      	ldr	r3, [r1, #16]
 8003ac0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bfb8      	it	lt
 8003ac8:	4613      	movlt	r3, r2
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	b10a      	cbz	r2, 8003ada <_printf_common+0x26>
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	0699      	lsls	r1, r3, #26
 8003ade:	bf42      	ittt	mi
 8003ae0:	6833      	ldrmi	r3, [r6, #0]
 8003ae2:	3302      	addmi	r3, #2
 8003ae4:	6033      	strmi	r3, [r6, #0]
 8003ae6:	6825      	ldr	r5, [r4, #0]
 8003ae8:	f015 0506 	ands.w	r5, r5, #6
 8003aec:	d106      	bne.n	8003afc <_printf_common+0x48>
 8003aee:	f104 0a19 	add.w	sl, r4, #25
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	6832      	ldr	r2, [r6, #0]
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	42ab      	cmp	r3, r5
 8003afa:	dc26      	bgt.n	8003b4a <_printf_common+0x96>
 8003afc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b00:	6822      	ldr	r2, [r4, #0]
 8003b02:	3b00      	subs	r3, #0
 8003b04:	bf18      	it	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	0692      	lsls	r2, r2, #26
 8003b0a:	d42b      	bmi.n	8003b64 <_printf_common+0xb0>
 8003b0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b10:	4641      	mov	r1, r8
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c8      	blx	r9
 8003b16:	3001      	adds	r0, #1
 8003b18:	d01e      	beq.n	8003b58 <_printf_common+0xa4>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	6922      	ldr	r2, [r4, #16]
 8003b1e:	f003 0306 	and.w	r3, r3, #6
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf02      	ittt	eq
 8003b26:	68e5      	ldreq	r5, [r4, #12]
 8003b28:	6833      	ldreq	r3, [r6, #0]
 8003b2a:	1aed      	subeq	r5, r5, r3
 8003b2c:	68a3      	ldr	r3, [r4, #8]
 8003b2e:	bf0c      	ite	eq
 8003b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b34:	2500      	movne	r5, #0
 8003b36:	4293      	cmp	r3, r2
 8003b38:	bfc4      	itt	gt
 8003b3a:	1a9b      	subgt	r3, r3, r2
 8003b3c:	18ed      	addgt	r5, r5, r3
 8003b3e:	2600      	movs	r6, #0
 8003b40:	341a      	adds	r4, #26
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	d11a      	bne.n	8003b7c <_printf_common+0xc8>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e008      	b.n	8003b5c <_printf_common+0xa8>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4652      	mov	r2, sl
 8003b4e:	4641      	mov	r1, r8
 8003b50:	4638      	mov	r0, r7
 8003b52:	47c8      	blx	r9
 8003b54:	3001      	adds	r0, #1
 8003b56:	d103      	bne.n	8003b60 <_printf_common+0xac>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	3501      	adds	r5, #1
 8003b62:	e7c6      	b.n	8003af2 <_printf_common+0x3e>
 8003b64:	18e1      	adds	r1, r4, r3
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	2030      	movs	r0, #48	@ 0x30
 8003b6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b6e:	4422      	add	r2, r4
 8003b70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b78:	3302      	adds	r3, #2
 8003b7a:	e7c7      	b.n	8003b0c <_printf_common+0x58>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4622      	mov	r2, r4
 8003b80:	4641      	mov	r1, r8
 8003b82:	4638      	mov	r0, r7
 8003b84:	47c8      	blx	r9
 8003b86:	3001      	adds	r0, #1
 8003b88:	d0e6      	beq.n	8003b58 <_printf_common+0xa4>
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7d9      	b.n	8003b42 <_printf_common+0x8e>
	...

08003b90 <_printf_i>:
 8003b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	7e0f      	ldrb	r7, [r1, #24]
 8003b96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b98:	2f78      	cmp	r7, #120	@ 0x78
 8003b9a:	4691      	mov	r9, r2
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ba6:	d807      	bhi.n	8003bb8 <_printf_i+0x28>
 8003ba8:	2f62      	cmp	r7, #98	@ 0x62
 8003baa:	d80a      	bhi.n	8003bc2 <_printf_i+0x32>
 8003bac:	2f00      	cmp	r7, #0
 8003bae:	f000 80d2 	beq.w	8003d56 <_printf_i+0x1c6>
 8003bb2:	2f58      	cmp	r7, #88	@ 0x58
 8003bb4:	f000 80b9 	beq.w	8003d2a <_printf_i+0x19a>
 8003bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bc0:	e03a      	b.n	8003c38 <_printf_i+0xa8>
 8003bc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bc6:	2b15      	cmp	r3, #21
 8003bc8:	d8f6      	bhi.n	8003bb8 <_printf_i+0x28>
 8003bca:	a101      	add	r1, pc, #4	@ (adr r1, 8003bd0 <_printf_i+0x40>)
 8003bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bd0:	08003c29 	.word	0x08003c29
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003bb9 	.word	0x08003bb9
 8003bdc:	08003bb9 	.word	0x08003bb9
 8003be0:	08003bb9 	.word	0x08003bb9
 8003be4:	08003bb9 	.word	0x08003bb9
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003bb9 	.word	0x08003bb9
 8003bf0:	08003bb9 	.word	0x08003bb9
 8003bf4:	08003bb9 	.word	0x08003bb9
 8003bf8:	08003bb9 	.word	0x08003bb9
 8003bfc:	08003d3d 	.word	0x08003d3d
 8003c00:	08003c67 	.word	0x08003c67
 8003c04:	08003cf7 	.word	0x08003cf7
 8003c08:	08003bb9 	.word	0x08003bb9
 8003c0c:	08003bb9 	.word	0x08003bb9
 8003c10:	08003d5f 	.word	0x08003d5f
 8003c14:	08003bb9 	.word	0x08003bb9
 8003c18:	08003c67 	.word	0x08003c67
 8003c1c:	08003bb9 	.word	0x08003bb9
 8003c20:	08003bb9 	.word	0x08003bb9
 8003c24:	08003cff 	.word	0x08003cff
 8003c28:	6833      	ldr	r3, [r6, #0]
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6032      	str	r2, [r6, #0]
 8003c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e09d      	b.n	8003d78 <_printf_i+0x1e8>
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	6820      	ldr	r0, [r4, #0]
 8003c40:	1d19      	adds	r1, r3, #4
 8003c42:	6031      	str	r1, [r6, #0]
 8003c44:	0606      	lsls	r6, r0, #24
 8003c46:	d501      	bpl.n	8003c4c <_printf_i+0xbc>
 8003c48:	681d      	ldr	r5, [r3, #0]
 8003c4a:	e003      	b.n	8003c54 <_printf_i+0xc4>
 8003c4c:	0645      	lsls	r5, r0, #25
 8003c4e:	d5fb      	bpl.n	8003c48 <_printf_i+0xb8>
 8003c50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	da03      	bge.n	8003c60 <_printf_i+0xd0>
 8003c58:	232d      	movs	r3, #45	@ 0x2d
 8003c5a:	426d      	negs	r5, r5
 8003c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c60:	4859      	ldr	r0, [pc, #356]	@ (8003dc8 <_printf_i+0x238>)
 8003c62:	230a      	movs	r3, #10
 8003c64:	e011      	b.n	8003c8a <_printf_i+0xfa>
 8003c66:	6821      	ldr	r1, [r4, #0]
 8003c68:	6833      	ldr	r3, [r6, #0]
 8003c6a:	0608      	lsls	r0, r1, #24
 8003c6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c70:	d402      	bmi.n	8003c78 <_printf_i+0xe8>
 8003c72:	0649      	lsls	r1, r1, #25
 8003c74:	bf48      	it	mi
 8003c76:	b2ad      	uxthmi	r5, r5
 8003c78:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c7a:	4853      	ldr	r0, [pc, #332]	@ (8003dc8 <_printf_i+0x238>)
 8003c7c:	6033      	str	r3, [r6, #0]
 8003c7e:	bf14      	ite	ne
 8003c80:	230a      	movne	r3, #10
 8003c82:	2308      	moveq	r3, #8
 8003c84:	2100      	movs	r1, #0
 8003c86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c8a:	6866      	ldr	r6, [r4, #4]
 8003c8c:	60a6      	str	r6, [r4, #8]
 8003c8e:	2e00      	cmp	r6, #0
 8003c90:	bfa2      	ittt	ge
 8003c92:	6821      	ldrge	r1, [r4, #0]
 8003c94:	f021 0104 	bicge.w	r1, r1, #4
 8003c98:	6021      	strge	r1, [r4, #0]
 8003c9a:	b90d      	cbnz	r5, 8003ca0 <_printf_i+0x110>
 8003c9c:	2e00      	cmp	r6, #0
 8003c9e:	d04b      	beq.n	8003d38 <_printf_i+0x1a8>
 8003ca0:	4616      	mov	r6, r2
 8003ca2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ca6:	fb03 5711 	mls	r7, r3, r1, r5
 8003caa:	5dc7      	ldrb	r7, [r0, r7]
 8003cac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cb0:	462f      	mov	r7, r5
 8003cb2:	42bb      	cmp	r3, r7
 8003cb4:	460d      	mov	r5, r1
 8003cb6:	d9f4      	bls.n	8003ca2 <_printf_i+0x112>
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10b      	bne.n	8003cd4 <_printf_i+0x144>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	07df      	lsls	r7, r3, #31
 8003cc0:	d508      	bpl.n	8003cd4 <_printf_i+0x144>
 8003cc2:	6923      	ldr	r3, [r4, #16]
 8003cc4:	6861      	ldr	r1, [r4, #4]
 8003cc6:	4299      	cmp	r1, r3
 8003cc8:	bfde      	ittt	le
 8003cca:	2330      	movle	r3, #48	@ 0x30
 8003ccc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cd4:	1b92      	subs	r2, r2, r6
 8003cd6:	6122      	str	r2, [r4, #16]
 8003cd8:	f8cd a000 	str.w	sl, [sp]
 8003cdc:	464b      	mov	r3, r9
 8003cde:	aa03      	add	r2, sp, #12
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4640      	mov	r0, r8
 8003ce4:	f7ff fee6 	bl	8003ab4 <_printf_common>
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d14a      	bne.n	8003d82 <_printf_i+0x1f2>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b004      	add	sp, #16
 8003cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	f043 0320 	orr.w	r3, r3, #32
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	4833      	ldr	r0, [pc, #204]	@ (8003dcc <_printf_i+0x23c>)
 8003d00:	2778      	movs	r7, #120	@ 0x78
 8003d02:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	6831      	ldr	r1, [r6, #0]
 8003d0a:	061f      	lsls	r7, r3, #24
 8003d0c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d10:	d402      	bmi.n	8003d18 <_printf_i+0x188>
 8003d12:	065f      	lsls	r7, r3, #25
 8003d14:	bf48      	it	mi
 8003d16:	b2ad      	uxthmi	r5, r5
 8003d18:	6031      	str	r1, [r6, #0]
 8003d1a:	07d9      	lsls	r1, r3, #31
 8003d1c:	bf44      	itt	mi
 8003d1e:	f043 0320 	orrmi.w	r3, r3, #32
 8003d22:	6023      	strmi	r3, [r4, #0]
 8003d24:	b11d      	cbz	r5, 8003d2e <_printf_i+0x19e>
 8003d26:	2310      	movs	r3, #16
 8003d28:	e7ac      	b.n	8003c84 <_printf_i+0xf4>
 8003d2a:	4827      	ldr	r0, [pc, #156]	@ (8003dc8 <_printf_i+0x238>)
 8003d2c:	e7e9      	b.n	8003d02 <_printf_i+0x172>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	f023 0320 	bic.w	r3, r3, #32
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	e7f6      	b.n	8003d26 <_printf_i+0x196>
 8003d38:	4616      	mov	r6, r2
 8003d3a:	e7bd      	b.n	8003cb8 <_printf_i+0x128>
 8003d3c:	6833      	ldr	r3, [r6, #0]
 8003d3e:	6825      	ldr	r5, [r4, #0]
 8003d40:	6961      	ldr	r1, [r4, #20]
 8003d42:	1d18      	adds	r0, r3, #4
 8003d44:	6030      	str	r0, [r6, #0]
 8003d46:	062e      	lsls	r6, r5, #24
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	d501      	bpl.n	8003d50 <_printf_i+0x1c0>
 8003d4c:	6019      	str	r1, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <_printf_i+0x1c6>
 8003d50:	0668      	lsls	r0, r5, #25
 8003d52:	d5fb      	bpl.n	8003d4c <_printf_i+0x1bc>
 8003d54:	8019      	strh	r1, [r3, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	6123      	str	r3, [r4, #16]
 8003d5a:	4616      	mov	r6, r2
 8003d5c:	e7bc      	b.n	8003cd8 <_printf_i+0x148>
 8003d5e:	6833      	ldr	r3, [r6, #0]
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	6032      	str	r2, [r6, #0]
 8003d64:	681e      	ldr	r6, [r3, #0]
 8003d66:	6862      	ldr	r2, [r4, #4]
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	f7fc fa58 	bl	8000220 <memchr>
 8003d70:	b108      	cbz	r0, 8003d76 <_printf_i+0x1e6>
 8003d72:	1b80      	subs	r0, r0, r6
 8003d74:	6060      	str	r0, [r4, #4]
 8003d76:	6863      	ldr	r3, [r4, #4]
 8003d78:	6123      	str	r3, [r4, #16]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d80:	e7aa      	b.n	8003cd8 <_printf_i+0x148>
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	4632      	mov	r2, r6
 8003d86:	4649      	mov	r1, r9
 8003d88:	4640      	mov	r0, r8
 8003d8a:	47d0      	blx	sl
 8003d8c:	3001      	adds	r0, #1
 8003d8e:	d0ad      	beq.n	8003cec <_printf_i+0x15c>
 8003d90:	6823      	ldr	r3, [r4, #0]
 8003d92:	079b      	lsls	r3, r3, #30
 8003d94:	d413      	bmi.n	8003dbe <_printf_i+0x22e>
 8003d96:	68e0      	ldr	r0, [r4, #12]
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	4298      	cmp	r0, r3
 8003d9c:	bfb8      	it	lt
 8003d9e:	4618      	movlt	r0, r3
 8003da0:	e7a6      	b.n	8003cf0 <_printf_i+0x160>
 8003da2:	2301      	movs	r3, #1
 8003da4:	4632      	mov	r2, r6
 8003da6:	4649      	mov	r1, r9
 8003da8:	4640      	mov	r0, r8
 8003daa:	47d0      	blx	sl
 8003dac:	3001      	adds	r0, #1
 8003dae:	d09d      	beq.n	8003cec <_printf_i+0x15c>
 8003db0:	3501      	adds	r5, #1
 8003db2:	68e3      	ldr	r3, [r4, #12]
 8003db4:	9903      	ldr	r1, [sp, #12]
 8003db6:	1a5b      	subs	r3, r3, r1
 8003db8:	42ab      	cmp	r3, r5
 8003dba:	dcf2      	bgt.n	8003da2 <_printf_i+0x212>
 8003dbc:	e7eb      	b.n	8003d96 <_printf_i+0x206>
 8003dbe:	2500      	movs	r5, #0
 8003dc0:	f104 0619 	add.w	r6, r4, #25
 8003dc4:	e7f5      	b.n	8003db2 <_printf_i+0x222>
 8003dc6:	bf00      	nop
 8003dc8:	08004f51 	.word	0x08004f51
 8003dcc:	08004f62 	.word	0x08004f62

08003dd0 <memmove>:
 8003dd0:	4288      	cmp	r0, r1
 8003dd2:	b510      	push	{r4, lr}
 8003dd4:	eb01 0402 	add.w	r4, r1, r2
 8003dd8:	d902      	bls.n	8003de0 <memmove+0x10>
 8003dda:	4284      	cmp	r4, r0
 8003ddc:	4623      	mov	r3, r4
 8003dde:	d807      	bhi.n	8003df0 <memmove+0x20>
 8003de0:	1e43      	subs	r3, r0, #1
 8003de2:	42a1      	cmp	r1, r4
 8003de4:	d008      	beq.n	8003df8 <memmove+0x28>
 8003de6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003dee:	e7f8      	b.n	8003de2 <memmove+0x12>
 8003df0:	4402      	add	r2, r0
 8003df2:	4601      	mov	r1, r0
 8003df4:	428a      	cmp	r2, r1
 8003df6:	d100      	bne.n	8003dfa <memmove+0x2a>
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003dfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e02:	e7f7      	b.n	8003df4 <memmove+0x24>

08003e04 <_sbrk_r>:
 8003e04:	b538      	push	{r3, r4, r5, lr}
 8003e06:	4d06      	ldr	r5, [pc, #24]	@ (8003e20 <_sbrk_r+0x1c>)
 8003e08:	2300      	movs	r3, #0
 8003e0a:	4604      	mov	r4, r0
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	f7fd fd82 	bl	8001918 <_sbrk>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_sbrk_r+0x1a>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_sbrk_r+0x1a>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20009490 	.word	0x20009490

08003e24 <memcpy>:
 8003e24:	440a      	add	r2, r1
 8003e26:	4291      	cmp	r1, r2
 8003e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e2c:	d100      	bne.n	8003e30 <memcpy+0xc>
 8003e2e:	4770      	bx	lr
 8003e30:	b510      	push	{r4, lr}
 8003e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e3a:	4291      	cmp	r1, r2
 8003e3c:	d1f9      	bne.n	8003e32 <memcpy+0xe>
 8003e3e:	bd10      	pop	{r4, pc}

08003e40 <_realloc_r>:
 8003e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4680      	mov	r8, r0
 8003e46:	4615      	mov	r5, r2
 8003e48:	460c      	mov	r4, r1
 8003e4a:	b921      	cbnz	r1, 8003e56 <_realloc_r+0x16>
 8003e4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e50:	4611      	mov	r1, r2
 8003e52:	f7ff bc4b 	b.w	80036ec <_malloc_r>
 8003e56:	b92a      	cbnz	r2, 8003e64 <_realloc_r+0x24>
 8003e58:	f7ff fbdc 	bl	8003614 <_free_r>
 8003e5c:	2400      	movs	r4, #0
 8003e5e:	4620      	mov	r0, r4
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e64:	f000 f81a 	bl	8003e9c <_malloc_usable_size_r>
 8003e68:	4285      	cmp	r5, r0
 8003e6a:	4606      	mov	r6, r0
 8003e6c:	d802      	bhi.n	8003e74 <_realloc_r+0x34>
 8003e6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e72:	d8f4      	bhi.n	8003e5e <_realloc_r+0x1e>
 8003e74:	4629      	mov	r1, r5
 8003e76:	4640      	mov	r0, r8
 8003e78:	f7ff fc38 	bl	80036ec <_malloc_r>
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d0ec      	beq.n	8003e5c <_realloc_r+0x1c>
 8003e82:	42b5      	cmp	r5, r6
 8003e84:	462a      	mov	r2, r5
 8003e86:	4621      	mov	r1, r4
 8003e88:	bf28      	it	cs
 8003e8a:	4632      	movcs	r2, r6
 8003e8c:	f7ff ffca 	bl	8003e24 <memcpy>
 8003e90:	4621      	mov	r1, r4
 8003e92:	4640      	mov	r0, r8
 8003e94:	f7ff fbbe 	bl	8003614 <_free_r>
 8003e98:	463c      	mov	r4, r7
 8003e9a:	e7e0      	b.n	8003e5e <_realloc_r+0x1e>

08003e9c <_malloc_usable_size_r>:
 8003e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ea0:	1f18      	subs	r0, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	bfbc      	itt	lt
 8003ea6:	580b      	ldrlt	r3, [r1, r0]
 8003ea8:	18c0      	addlt	r0, r0, r3
 8003eaa:	4770      	bx	lr

08003eac <_init>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr

08003eb8 <_fini>:
 8003eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eba:	bf00      	nop
 8003ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ebe:	bc08      	pop	{r3}
 8003ec0:	469e      	mov	lr, r3
 8003ec2:	4770      	bx	lr
